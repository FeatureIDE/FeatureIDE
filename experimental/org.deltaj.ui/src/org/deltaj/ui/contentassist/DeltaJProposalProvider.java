/*
 * generated by Xtext
 */
package org.deltaj.ui.contentassist;

import java.util.Collection;

import org.deltaj.util.DeltaJElementCollector;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.inject.Inject;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class DeltaJProposalProvider extends AbstractDeltaJProposalProvider {

	@Inject
	protected DeltaJElementCollector collector;

	@Override
	public void completeNew_Class(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		buildProposalsForClassNames(model, context, acceptor);
	}

	@Override
	public void completeCast_Type(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		buildProposalsForClassNames(model, context, acceptor);
	}

	@Override
	public void completeField_Type(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.completeField_Type(model, assignment, context, acceptor);
		buildProposalsForClassNames(model, context, acceptor);
	}

	@Override
	public void completeLocalVariableDeclaration_Type(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeLocalVariableDeclaration_Type(model, assignment, context,
				acceptor);
		buildProposalsForClassNames(model, context, acceptor);
	}

	@Override
	public void completeParameter_Type(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.completeParameter_Type(model, assignment, context, acceptor);
		buildProposalsForClassNames(model, context, acceptor);
	}

	@Override
	public void completeFieldSelection_Field(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		buildProposalsForFieldNames(model, context, acceptor);
	}

	@Override
	public void completeFieldRemoval_Name(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		buildProposalsForFieldNames(model, context, acceptor);
	}

	@Override
	public void completeMethodCall_Method(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		buildProposalsForMethodNames(model, context, acceptor);
	}

	@Override
	public void completeMethodRemoval_Name(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		buildProposalsForMethodNames(model, context, acceptor);
	}

	@Override
	public void completeMethodModification_Method(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		buildProposalsForMethodNames(model, context, acceptor);
	}

	protected void buildProposalsForClassNames(EObject model,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		buildProposals(context, acceptor,
				collector.getAllAvailableClassNames(model));
	}

	protected void buildProposalsForFieldNames(EObject model,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		buildProposals(context, acceptor,
				collector.getAllAvailableFieldNames(model));
	}

	protected void buildProposalsForMethodNames(EObject model,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		buildProposals(context, acceptor,
				collector.getAllAvailableMethodNames(model));
	}

	protected void buildProposals(ContentAssistContext context,
			ICompletionProposalAcceptor acceptor, Collection<String> classNames) {
		for (String className : classNames) {
			acceptor.accept(createCompletionProposal(className, context));
		}
	}

}
