«IMPORT org::deltaj::ui::wizard»

«DEFINE main FOR DeltaJProjectInfo»
«EXPAND model FOR this»
«ENDDEFINE»

«DEFINE model FOR DeltaJProjectInfo»
«FILE "src/deltaj/example.deltaj"-»
/*
 * This is an example DeltaJ program
 */

delta d1 {
	adds class Base { }

	adds class C1 extends Base { }
	adds class C2 { }
	adds class C3 { }
	adds class C4 { }
	adds class C5 extends Base { }
}

delta d2 {
	removes C2;
	removes C4;
	
	adds class Cd2 extends Base { }
}

delta d3 {
	removes C3;
	removes C1;
	
	adds class Cd3 extends C5 {
		int i;
		String toRemove;

		void m() {
		}

		void methodToRemove() {
		}
		
		void methodToModify() {
			**Java: /* old version */ :Java**
		}
	}
}

delta d_modifies_class_by_adds {
	modifies Cd3 extending Base { 
		adds boolean b;
		adds int addedMethod(String s) { **Java: return 0; :Java** }
	}
}

delta d_modifies_class_by_removes_field {
	modifies Cd3 { 
		removesField toRemove;
	}
}

delta d_modifies_class_by_removes_method {
	modifies Cd3 { 
		removesMethod methodToRemove;
	}
}

delta d_modifies_class_by_modifies_method {
	modifies Cd3 { 
		modifies void methodToModify() {
			**Java:
			/* new version which uses the original one */
			this.original();
			:Java**
		}
	}
}

spl testspl1 {
	features Foo, Bar, AAA, ForRemoveField, ForRemoveMethod, ForModifiesMethod
	configurations (Foo && Bar) || Bar
	deltas
		[ d1 when Foo || Bar,
			d3 when Foo ]
		
		[ d2 when Bar ]
		
		[ d_modifies_class_by_adds when Bar ]
		
		[ d_modifies_class_by_removes_field when ForRemoveField ]
		
		[ d_modifies_class_by_removes_method when ForRemoveMethod ]
		
		[ d_modifies_class_by_modifies_method when ForModifiesMethod ]
}

product PFoo from testspl1 : { Foo }
product PFooBar from testspl1 : { Foo, Bar }
product PBar from testspl1 : { Bar }
product PAAA from testspl1 : { AAA }
product PRemoveField from testspl1 : { Bar, ForRemoveField, Foo }
product PRemoveMethod from testspl1 : { Bar, ForRemoveMethod, Foo }
product PModifyMethod from testspl1 : { Bar, ForModifiesMethod, Foo }
«ENDFILE»

«FILE "src/deltaj/EPL.deltaj"-»
/*
 * This is the example of Expression Product Line 
 */

delta DLitAddPrint {
	
	adds class Exp { // only used as a type
		String toString() { return ""; }
	}
	
	adds class Lit extends Exp {
		int value;
		Lit setLit(int n) { value = n; return this; }
		String toString() { return this.value + ""; }
	}
	
	adds class Add extends Exp {
		Exp expr1;
		Exp expr2;
		Add setAdd(Exp a, Exp b) { 
			expr1 = a; expr2 = b; return this;
		}
		String toString() { 
			return expr1.toString() + " + " + this.expr2.toString(); 
		}
	}
}

delta DLitEval {
	modifies Exp {
		adds int eval() { return 0; }
	}
	
	modifies Lit {
		adds int eval() { return this.value; }
	}
}

delta DAddEval {
	modifies Add {
		adds int eval() { return this.expr1.eval() + this.expr2.eval(); }
	}
}

delta DNeg {
	adds class Neg extends Exp {
		Exp expr;
		Neg setNeg(Exp a) { this.expr = a; return this; }
	}
}

delta DNegPrint {
	modifies Neg {
		adds String toString() { return "-" + this.expr.toString(); }
	}
}

delta DNegEval {
	modifies Neg {
		adds int eval() { return -1 * this.expr.eval(); }
	}
}

delta DOptionalPrint {
	modifies Add {
		modifies String toString() { return "(" + original() + ")"; }
	} 
}

delta DremAdd {
	removes Add;
}

spl EPL {
	features Lit, Add, Neg, Print, Eval
	configurations Lit && Print
	deltas
		[DLitAddPrint,
			DNeg when Neg]
		
		[DremAdd when !Add]
		
		[DLitEval when Eval,
			DAddEval when (Add && Eval),
			DNegEval when (Neg && Eval),
			DNegPrint when Neg,
			DOptionalPrint when (Add && Neg)]
}

product FirstTest from EPL : {Lit, Add, Neg, Print, Eval}
product SecondTest from EPL : {Lit, Eval}
«ENDFILE»

«FILE "src/deltaj/EPL2.deltaj"-»
/*
 * This extends the EPL of EPL.deltaj
 */

delta DSub {
	adds class Sub extends Exp {
		Exp expr1;
		Exp expr2;
		Sub setSub(Exp a, Exp b) {
			this.expr1 = a;
			this.expr2 = b;
			return this;
		}
	}
}

delta DSubPrint {
	modifies Sub {
		adds String toString() {
			return "(" + this.expr1.toString() + " - " + this.expr2.toString() + ")";
		}
	}
}

delta DSubEval {
	modifies Sub {
		adds int eval() { return this.expr1.eval() - this.expr2.eval(); }
	}
}

delta DremPrintLit {
	modifies Exp { removesMethod toString; }
	modifies Lit { removesMethod toString; }
}

delta DremPrintAdd {
	modifies Add { removesMethod toString; }
}

spl EPL2 {
	features Lit, Add, Neg, Sub, Print, Eval
	configurations Lit && Eval && (Neg || Sub)
	deltas
		[DLitAddPrint,
			DNeg when Neg,
			DSub when Sub /* new delta module */]
		
		[DremAdd when !Add]
		
		[DremPrintLit when !Print, /* new delta module */
			DremPrintAdd when (!Print && Add) /* new delta module */
		]
		
		[DLitEval when Eval,
			DAddEval when Add,
			DNegEval when Neg,
			DSubEval when Sub, /* new delta module */
			DNegPrint when (Neg && Print),
			DSubPrint when (Sub && Print), /* new delta module */
			DOptionalPrint when (Add && (Neg || Print) && Print)]
}

product LitSubEval from EPL2 : {Lit, Sub, Eval}
«ENDFILE»
«ENDDEFINE»

«REM»
«DEFINE workflow FOR DeltaJProjectInfo»
«FILE "src/Generator.mwe2"-»
module Generator

var targetDir = "deltaj-gen"
var modelPath = "src/deltaj"

Workflow {
	component = @org.deltaj.generator.DeltaJGeneratorMWE auto-inject {}
}
«ENDFILE»
«ENDDEFINE»
«ENDREM»
