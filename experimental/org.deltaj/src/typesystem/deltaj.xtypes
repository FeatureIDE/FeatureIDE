/* static type system definition for DeltaJ written in XTypeS */

typesystem DeltaJ

grammar "platform:/resource/org.deltaj/src-gen/org/deltaj/DeltaJ.ecore"

judgments
	'|-' ':' kind="type"
end

// base case
rule Expression
derives G |- var Expression exp : var Type t
from fail

rule Plus
derives G |- var Plus plus : var Type t
from
	var BasicType leftType
	var BasicType rightType
	G |- $plus.left : $leftType
	G |- $plus.right : $rightType
	// if one of the two subexpressions has type String
	// then the expression has type String, otherwise
	// they must be integer subexpressions
	(
		$leftType.basic = "String"
		$t := $leftType
		or
		$rightType.basic = "String"
		$t := $rightType
		or
		$leftType.basic = "int"
		$rightType.basic = "int"
		$t := $leftType
	)

rule Minus
derives G |- var Minus exp : var Type t
from
	var IntType leftType
	var IntType rightType
	G |- $exp.left : $leftType
	G |- $exp.right : $rightType
	$t := $leftType

rule ArithmeticSigned
derives G |- var ArithmeticSigned exp : var Type t
from
	var IntType subExpType
	G |- $exp.expression : $subExpType
	$t := $subExpType

rule MultiOrDiv
derives G |- var MultiOrDiv exp : var Type t
from
	var IntType leftType
	var IntType rightType
	G |- $exp.left : $leftType
	G |- $exp.right : $rightType
	$t := $leftType

rule Comparison
derives G |- var Comparison exp : var Type t
from
	var IntType leftType
	var IntType rightType
	G |- $exp.left : $leftType
	G |- $exp.right : $rightType
	var BooleanType booleanType
	$booleanType.basic := 'boolean'
	$t := $booleanType

rule AndOrExpression
derives G |- var AndOrExpression exp : var Type t
from
	var BooleanType leftType
	var BooleanType rightType
	G |- $exp.left : $leftType
	G |- $exp.right : $rightType
	$t := $leftType

rule BooleanNegation
derives G |- var BooleanNegation exp : var Type t
from
	var BooleanType subExpType
	G |- $exp.expression : $subExpType
	$t := $subExpType

rule StringConstant
derives G |- var StringConstant c : var Type t
from
	var StringType b
	$b.basic := "String"
	$t := $b
	
rule IntConstant
derives G |- var IntConstant c : var Type t
from
	var IntType b
	$b.basic := "int"
	$t := $b

rule BoolConstant
derives G |- var BoolConstant c : var Type t
from
	var BooleanType b
	$b.basic := "boolean"
	$t := $b

axiom This
	G |- var This t : (Type) env(G, 'this')
		
rule New
derives G |- var New n : var Type t
from
	var ClassType classType
	$classType.classref := $n.class
	$t := $classType

rule Cast
derives G |- var Cast cast : var Type t
from
	var ClassType classType
	$classType.classref := $cast.type
	$t := $classType

rule Paren
derives G |- var Paren paren : var Type t
from
	G |- $paren.expression : $t

// do not simply put as the right element $v.variable.type
// since its type is TypeForDeclaration and the rule wouldn't match
// when requesting a Type
rule VariableAccess
derives G |- var VariableAccess v : var Type t
from
	$t := $v.variable.type