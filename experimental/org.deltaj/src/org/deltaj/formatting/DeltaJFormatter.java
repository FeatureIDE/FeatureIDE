/*
 * generated by Xtext
 */
package org.deltaj.formatting;

import org.deltaj.services.DeltaJGrammarAccess;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class DeltaJFormatter extends AbstractDeclarativeFormatter {

	@Override
	protected void configureFormatting(FormattingConfig config) {

		config.setAutoLinewrap(120);

		DeltaJGrammarAccess grammarAccess = (DeltaJGrammarAccess) this.getGrammarAccess();

		Specifier specifier = new Specifier(grammarAccess, config);
		specifier.setIndentationBetween("{", "}");
		specifier.setLinewrapAfter("{", "}", ";");
		specifier.setNoSpaceBefore(".", ":", ";", ",", "]", "(", ")");
		specifier.setNoSpaceAfter(".", "(", "[", "!");
		
		config.setLinewrap().after(grammarAccess.getFeaturesRule());
		config.setLinewrap().after(grammarAccess.getConfigurationsRule());

		config.setLinewrap().after(grammarAccess.getPartitionPartRule());
		config.setLinewrap().after(grammarAccess.getDeltaPartitionAccess().getDeltasKeyword_0());
		config.setIndentationIncrement().after(grammarAccess.getDeltaPartitionAccess().getDeltasKeyword_0());
		config.setIndentationDecrement().after(grammarAccess.getDeltaPartitionRule());
		config.setLinewrap().after(grammarAccess.getPartitionPartRule());
		config.setLinewrap().bounds(grammarAccess.getModuleReferenceRule(), grammarAccess.getModuleReferenceRule());
		config.setIndentation(grammarAccess.getPartitionPartAccess().getLeftSquareBracketKeyword_0(), grammarAccess.getPartitionPartAccess().getRightSquareBracketKeyword_3());
		
		config.setLinewrap(2).after(grammarAccess.getDeltaModuleRule());
		config.setLinewrap(2).after(grammarAccess.getProductLineRule());
		
		config.setLinewrap(2).between(grammarAccess.getDeltaModuleRule(), grammarAccess.getDeltaModuleRule());
		config.setLinewrap(2).between(grammarAccess.getDeltaActionRule(), grammarAccess.getDeltaActionRule());
		config.setLinewrap(2).between(grammarAccess.getDeltaSubActionRule(), grammarAccess.getDeltaSubActionRule());
//		config.setLinewrap(2).between(grammarAccess.getMethodRule(), grammarAccess.getMethodRule());
//		config.setLinewrap(2).between(grammarAccess.getFieldRule(), grammarAccess.getMethodRule());
//		config.setLinewrap(2).between(grammarAccess.getMethodRule(), grammarAccess.getFieldRule());
//		config.setLinewrap(2).between(grammarAccess.getFieldAccess().getSemicolonKeyword_2(), grammarAccess.getMethodAccess().getReturntypeTypeForMethodParserRuleCall_0_0());
	}

	public static class Specifier {

		private final DeltaJGrammarAccess grammarAccess;
		private final FormattingConfig config;

		public Specifier(DeltaJGrammarAccess grammarAccess, FormattingConfig config) {

			this.grammarAccess = grammarAccess;
			this.config = config;
		}

		public void setLinewrapBefore(String...keywords) {

			for (Keyword keyword: this.grammarAccess.findKeywords(keywords)) {
				this.config.setLinewrap(1).before(keyword);
			}
		}

		public void setLinewrapAfter(String...keywords) {

			for (Keyword keyword: this.grammarAccess.findKeywords(keywords)) {
				this.config.setLinewrap(1).after(keyword);
			}
		}

		public void setNoSpaceBefore(String...keywords) {

			for (Keyword keyword: this.grammarAccess.findKeywords(keywords)) {
				this.config.setNoSpace().before(keyword);
			}
		}

		public void setNoSpaceAfter(String...keywords) {

			for (Keyword keyword: this.grammarAccess.findKeywords(keywords)) {
				this.config.setNoSpace().after(keyword);
			}
		}

		public void setIndentationBetween(String left, String right) {

			for (Pair<Keyword, Keyword> pair: this.grammarAccess.findKeywordPairs("{", "}")) {
				this.config.setIndentation(pair.getFirst(), pair.getSecond());
			}
		}
	}
}
