/*
 * generated by Xtext
 */
package org.deltaj.generator

import com.google.inject.Inject
import org.deltaj.deltaj.DeltaAction
import org.deltaj.deltaj.Method
import org.deltaj.typing.DeltaJTypeSystem
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

import static extension org.eclipse.xtext.xbase.lib.IteratorExtensions.*

class DeltaJConstraintsGenerator implements IGenerator {
	
	@Inject DeltaJTypeSystem typeSystem
	
	@Inject DeltaJStatementConstraintGenerator statementConstraintGenerator
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(delta: resource.allContents.toIterable.filter(typeof(org.deltaj.deltaj.DeltaModule))) {
			compile(delta, fsa)
		}
	}
	
	def compile(org.deltaj.deltaj.DeltaModule delta, IFileSystemAccess fsa) {
		fsa.generateFile("constraints/" + delta.getName + ".deltajconstraints", compile(delta))
	}
	
	def compile(org.deltaj.deltaj.DeltaModule delta) '''
	delta «delta.getName» with {
		«FOR action : delta.getDeltaActions»
		«action.compile»
		«ENDFOR»
	}
	'''
	
	def dispatch compile(DeltaAction action) '''
	/* not yet implemented */
	'''

	def dispatch compile(org.deltaj.deltaj.ClassAddition action) '''
	adds «action.getClass_.name» with {
		«FOR method : action.getClass_.methods»
		«method.compile»
		«ENDFOR»
	}
	'''

	def compile(Method method) '''
	«method.name» with {
		«statementConstraintGenerator.genConstraints(typeSystem, method.body.statements)»
	}
	'''
	
}
