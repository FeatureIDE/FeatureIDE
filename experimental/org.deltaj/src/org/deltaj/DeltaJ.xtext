grammar org.deltaj.DeltaJ with org.eclipse.xtext.common.Terminals

generate deltaj "http://www.deltaj.org/DeltaJ"

Program:
	(deltaModules += DeltaModule)*
	(productLines += ProductLine)*
	(products += Product)*
;

Type: TypeVariable | TypeForMethod;

/* 
 * TypeVariable cannot be written in the syntax but used only
 * by the type system
 */
TypeVariable: varName = TypeVariableId;

TypeVariableId: '<' INT '>';

TypeForMethod: VoidType | TypeForDeclaration;

VoidType : void='void';

TypeForDeclaration : BasicType | ClassType;

BasicType : IntType | BooleanType | StringType; 

IntType: basic='int';
BooleanType: basic='boolean';
StringType: basic='String';

ClassType : classref=ClassName;

Class: 'class' name=ID ('extends' extends = ClassName)? '{'
	(fields += Field)*
	(methods += Method)*
'}';

ClassName:
	ID
;

FieldName:
	ID
;

MethodName:
	ID
;

TypedDeclaration:
	Field | LocalVariableDeclaration | Parameter
;

Field returns Field:
	type=TypeForDeclaration name=ID ';'
;

LocalVariableDeclaration returns LocalVariableDeclaration:
	type=TypeForDeclaration name=ID ';'
;

Parameter returns Parameter:
	type=TypeForDeclaration name=ID
;

Method:
	returntype=TypeForMethod name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' 
		(body=StatementBlock)?
;

StatementBlock:
	{StatementBlock} 
	'{'
		(localvariables += LocalVariableDeclaration)*
		(statements += Statement)*
		(statements += ReturnStatement)?
	'}'
;

ReturnStatement returns Statement:
	{ReturnStatement} 'return' (expression=Expression)? ';'
;

Statement:
	ExpressionStatement |
	Assignment |
	IfStatement |
	{JavaVerbatim} verbatim=JAVAVERBATIM
;

ExpressionStatement:
	expression=Expression ';'
;

Assignment:
	left=Expression '=' right=Expression ';'
;

IfStatement:
	{IfStatement} 'if' '(' expression=Expression ')'
		thenBlock = StatementBlock
		('else' elseBlock=StatementBlock)? 
;

Expression:
	Addition ;
	
Addition returns Expression:
	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
	
Multiplication returns Expression:
	Comparison ( {MultiOrDiv.left=current} op=("*"|"/") right=Comparison)*; 

Comparison returns Expression:
	BooleanExpression 
	( {Comparison.left=current} op=(">="|"<="|"<"|">"|"=="|"!=")  right=BooleanExpression)*;

BooleanExpression returns Expression:
	Atomic ( {AndOrExpression.left=current} op=("||"|"&&") right=Atomic)*;

Atomic returns Expression:
	{BooleanNegation} "!" expression=Atomic | /* right associativity */
	{ArithmeticSigned} "-" expression=Atomic | /* right associativity */
	TerminalExpression ({Selection.receiver=current} '.' message=Message )*
;

TerminalExpression returns Expression:
   This |
   Null |
   Original |
   New |
   Cast |
   Constant |
   VariableAccess |
   Paren
;

Null: null='null';
This: variable='this';
Original: method='original' '(' (args+=Expression (',' args+=Expression)*)? ')';
VariableAccess: variable=[TypedDeclaration];
New: 'new' class=ClassName '(' /* (args+=Expression (',' args+=Expression)*)? */ ')';
Cast: '(' type=ClassName ')' object=TerminalExpression;
Paren: '(' expression=Expression ')'; 

Constant: IntConstant | BoolConstant | StringConstant;

StringConstant: 
	constant=STRING;

IntConstant:
	constant=INT;

BoolConstant:
	constant = ('true' | 'false');

Message:
    FieldSelection | MethodCall
;

MethodCall: method=ID '(' (args+=Expression (',' args+=Expression)*)? ')';
FieldSelection: field=ID; 

terminal JAVAVERBATIM: '**Java:' -> ':Java**';

DeltaModule: 'delta' name=ID '{'
	(deltaActions += DeltaAction)* 
'}';

DeltaAction:
	ClassAddition | RemovesOrModifiesClass
;

ClassAddition:
	'adds' class=Class
;

RemovesOrModifiesClass:
	ClassRemoval | ClassModification
;

ClassRemoval:
	'removes' name=ClassName ';'
;

ClassModification:
	'modifies' name=ClassName ('extending' extends = ClassName)? '{'
	 	(subActions += DeltaSubAction)*
	'}'
;

DeltaSubAction:
	MethodOrFieldAddition | FieldRemoval | MethodRemoval | MethodModification
;

MethodOrFieldAddition:
	FieldAddition | MethodAddition
;

FieldAddition:
	'adds' field=Field
;

MethodAddition:
	'adds' method=Method
;

FieldRemoval: 'removesField' name=FieldName ';' ;
MethodRemoval: 'removesMethod' name=MethodName ';' ;

MethodModification:
	'modifies' method=Method
;

ProductLine:
	'spl' name=ID '{'
		features=Features
		configurations=Configurations
		partition=DeltaPartition
	'}'
;

Features: 'features' (featuresList+=Feature (',' featuresList+=Feature)* )
;

Feature: name=ID
;

Configurations:
	'configurations' 
	configurations += Configuration 
		(';' configurations += Configuration)*
;

Configuration: 
	formula = PropositionalFormula
;

DeltaPartition:
	'deltas'
	(parts += PartitionPart)+
;

PartitionPart:
	'[' moduleReferences += ModuleReference (',' moduleReferences += ModuleReference)* ']'
;

ModuleReference:
	deltaModule=[DeltaModule] ('when' when=PropositionalFormula)?
;

PropositionalFormula:
  And ({Or.left=current} '||' right=And)*
;
  
And returns PropositionalFormula:
  Primary ({And.left=current} '&&' right=Primary)*
;
  
Primary returns PropositionalFormula:
  {FeatureRef} feature=[Feature] |
  {PropParen} '(' formula=PropositionalFormula ')' |
  {Negation} '!' formula=Primary |
  {PropTrue} 'true' |
  {PropFalse} 'false'
;

Product:
	'product' name=ID 'from' productLine=[ProductLine] ':' '{'
		features += [Feature] (',' features += [Feature])*
	'}'
;
