/*
* generated by Xtext
*/
grammar InternalDeltaJ;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.deltaj.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.deltaj.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.deltaj.services.DeltaJGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private DeltaJGrammarAccess grammarAccess;
 	
    public InternalDeltaJParser(TokenStream input, DeltaJGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected DeltaJGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getDeltaModulesDeltaModuleParserRuleCall_0_0()); 
	    }
		lv_deltaModules_0_0=ruleDeltaModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"deltaModules",
        		lv_deltaModules_0_0, 
        		"DeltaModule");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getProductLinesProductLineParserRuleCall_1_0()); 
	    }
		lv_productLines_1_0=ruleProductLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"productLines",
        		lv_productLines_1_0, 
        		"ProductLine");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getProductsProductParserRuleCall_2_0()); 
	    }
		lv_products_2_0=ruleProduct		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"products",
        		lv_products_2_0, 
        		"Product");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;







// Entry rule entryRuleTypeVariable
entryRuleTypeVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeVariableRule()); }
	 iv_ruleTypeVariable=ruleTypeVariable 
	 { $current=$iv_ruleTypeVariable.current; } 
	 EOF 
;

// Rule TypeVariable
ruleTypeVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeVariableAccess().getVarNameTypeVariableIdParserRuleCall_0()); 
	    }
		lv_varName_0_0=ruleTypeVariableId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeVariableRule());
	        }
       		set(
       			$current, 
       			"varName",
        		lv_varName_0_0, 
        		"TypeVariableId");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTypeVariableId
entryRuleTypeVariableId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeVariableIdRule()); } 
	 iv_ruleTypeVariableId=ruleTypeVariableId 
	 { $current=$iv_ruleTypeVariableId.current.getText(); }  
	 EOF 
;

// Rule TypeVariableId
ruleTypeVariableId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeVariableIdAccess().getLessThanSignKeyword_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getTypeVariableIdAccess().getINTTerminalRuleCall_1()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeVariableIdAccess().getGreaterThanSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleTypeForMethod
entryRuleTypeForMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeForMethodRule()); }
	 iv_ruleTypeForMethod=ruleTypeForMethod 
	 { $current=$iv_ruleTypeForMethod.current; } 
	 EOF 
;

// Rule TypeForMethod
ruleTypeForMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeForMethodAccess().getVoidTypeParserRuleCall_0()); 
    }
    this_VoidType_0=ruleVoidType
    { 
        $current = $this_VoidType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeForMethodAccess().getTypeForDeclarationParserRuleCall_1()); 
    }
    this_TypeForDeclaration_1=ruleTypeForDeclaration
    { 
        $current = $this_TypeForDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVoidType
entryRuleVoidType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVoidTypeRule()); }
	 iv_ruleVoidType=ruleVoidType 
	 { $current=$iv_ruleVoidType.current; } 
	 EOF 
;

// Rule VoidType
ruleVoidType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_void_0_0=	'void' 
    {
        newLeafNode(lv_void_0_0, grammarAccess.getVoidTypeAccess().getVoidVoidKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVoidTypeRule());
	        }
       		setWithLastConsumed($current, "void", lv_void_0_0, "void");
	    }

)
)
;





// Entry rule entryRuleTypeForDeclaration
entryRuleTypeForDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeForDeclarationRule()); }
	 iv_ruleTypeForDeclaration=ruleTypeForDeclaration 
	 { $current=$iv_ruleTypeForDeclaration.current; } 
	 EOF 
;

// Rule TypeForDeclaration
ruleTypeForDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeForDeclarationAccess().getBasicTypeParserRuleCall_0()); 
    }
    this_BasicType_0=ruleBasicType
    { 
        $current = $this_BasicType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeForDeclarationAccess().getClassTypeParserRuleCall_1()); 
    }
    this_ClassType_1=ruleClassType
    { 
        $current = $this_ClassType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	 iv_ruleBasicType=ruleBasicType 
	 { $current=$iv_ruleBasicType.current; } 
	 EOF 
;

// Rule BasicType
ruleBasicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicTypeAccess().getIntTypeParserRuleCall_0()); 
    }
    this_IntType_0=ruleIntType
    { 
        $current = $this_IntType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicTypeAccess().getBooleanTypeParserRuleCall_1()); 
    }
    this_BooleanType_1=ruleBooleanType
    { 
        $current = $this_BooleanType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicTypeAccess().getStringTypeParserRuleCall_2()); 
    }
    this_StringType_2=ruleStringType
    { 
        $current = $this_StringType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntType
entryRuleIntType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntTypeRule()); }
	 iv_ruleIntType=ruleIntType 
	 { $current=$iv_ruleIntType.current; } 
	 EOF 
;

// Rule IntType
ruleIntType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_basic_0_0=	'int' 
    {
        newLeafNode(lv_basic_0_0, grammarAccess.getIntTypeAccess().getBasicIntKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntTypeRule());
	        }
       		setWithLastConsumed($current, "basic", lv_basic_0_0, "int");
	    }

)
)
;





// Entry rule entryRuleBooleanType
entryRuleBooleanType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanTypeRule()); }
	 iv_ruleBooleanType=ruleBooleanType 
	 { $current=$iv_ruleBooleanType.current; } 
	 EOF 
;

// Rule BooleanType
ruleBooleanType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_basic_0_0=	'boolean' 
    {
        newLeafNode(lv_basic_0_0, grammarAccess.getBooleanTypeAccess().getBasicBooleanKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanTypeRule());
	        }
       		setWithLastConsumed($current, "basic", lv_basic_0_0, "boolean");
	    }

)
)
;





// Entry rule entryRuleStringType
entryRuleStringType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringTypeRule()); }
	 iv_ruleStringType=ruleStringType 
	 { $current=$iv_ruleStringType.current; } 
	 EOF 
;

// Rule StringType
ruleStringType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_basic_0_0=	'String' 
    {
        newLeafNode(lv_basic_0_0, grammarAccess.getStringTypeAccess().getBasicStringKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringTypeRule());
	        }
       		setWithLastConsumed($current, "basic", lv_basic_0_0, "String");
	    }

)
)
;





// Entry rule entryRuleClassType
entryRuleClassType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassTypeRule()); }
	 iv_ruleClassType=ruleClassType 
	 { $current=$iv_ruleClassType.current; } 
	 EOF 
;

// Rule ClassType
ruleClassType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassTypeAccess().getClassrefClassNameParserRuleCall_0()); 
	    }
		lv_classref_0_0=ruleClassName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassTypeRule());
	        }
       		set(
       			$current, 
       			"classref",
        		lv_classref_0_0, 
        		"ClassName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassAccess().getClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassAccess().getExtendsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getExtendsClassNameParserRuleCall_2_1_0()); 
	    }
		lv_extends_3_0=ruleClassName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		set(
       			$current, 
       			"extends",
        		lv_extends_3_0, 
        		"ClassName");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getFieldsFieldParserRuleCall_4_0()); 
	    }
		lv_fields_5_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_5_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getMethodsMethodParserRuleCall_5_0()); 
	    }
		lv_methods_6_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_6_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleClassName
entryRuleClassName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassNameRule()); } 
	 iv_ruleClassName=ruleClassName 
	 { $current=$iv_ruleClassName.current.getText(); }  
	 EOF 
;

// Rule ClassName
ruleClassName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getClassNameAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleFieldName
entryRuleFieldName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldNameRule()); } 
	 iv_ruleFieldName=ruleFieldName 
	 { $current=$iv_ruleFieldName.current.getText(); }  
	 EOF 
;

// Rule FieldName
ruleFieldName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFieldNameAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleMethodName
entryRuleMethodName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodNameRule()); } 
	 iv_ruleMethodName=ruleMethodName 
	 { $current=$iv_ruleMethodName.current.getText(); }  
	 EOF 
;

// Rule MethodName
ruleMethodName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getMethodNameAccess().getIDTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getTypeTypeForDeclarationParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleTypeForDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TypeForDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableDeclarationRule()); }
	 iv_ruleLocalVariableDeclaration=ruleLocalVariableDeclaration 
	 { $current=$iv_ruleLocalVariableDeclaration.current; } 
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getTypeTypeForDeclarationParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleTypeForDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TypeForDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLocalVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalVariableDeclarationAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeForDeclarationParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleTypeForDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TypeForDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getReturntypeTypeForMethodParserRuleCall_0_0()); 
	    }
		lv_returntype_0_0=ruleTypeForMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"returntype",
        		lv_returntype_0_0, 
        		"TypeForMethod");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_3_0_0()); 
	    }
		lv_params_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_3_1_1_0()); 
	    }
		lv_params_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getBodyStatementBlockParserRuleCall_5_0()); 
	    }
		lv_body_7_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_7_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleStatementBlock
entryRuleStatementBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementBlockRule()); }
	 iv_ruleStatementBlock=ruleStatementBlock 
	 { $current=$iv_ruleStatementBlock.current; } 
	 EOF 
;

// Rule StatementBlock
ruleStatementBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementBlockAccess().getStatementBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatementBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementBlockAccess().getLocalvariablesLocalVariableDeclarationParserRuleCall_2_0()); 
	    }
		lv_localvariables_2_0=ruleLocalVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementBlockRule());
	        }
       		add(
       			$current, 
       			"localvariables",
        		lv_localvariables_2_0, 
        		"LocalVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementBlockAccess().getStatementsStatementParserRuleCall_3_0()); 
	    }
		lv_statements_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementBlockAccess().getStatementsReturnStatementParserRuleCall_4_0()); 
	    }
		lv_statements_4_0=ruleReturnStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"ReturnStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStatementBlockAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_0()); 
    }
    this_ExpressionStatement_0=ruleExpressionStatement
    { 
        $current = $this_ExpressionStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1()); 
    }
    this_Assignment_1=ruleAssignment
    { 
        $current = $this_Assignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2()); 
    }
    this_IfStatement_2=ruleIfStatement
    { 
        $current = $this_IfStatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getJavaVerbatimAction_3_0(),
            $current);
    }
)(
(
		lv_verbatim_4_0=RULE_JAVAVERBATIM
		{
			newLeafNode(lv_verbatim_4_0, grammarAccess.getStatementAccess().getVerbatimJAVAVERBATIMTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"verbatim",
        		lv_verbatim_4_0, 
        		"JAVAVERBATIM");
	    }

)
)))
;





// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	 iv_ruleExpressionStatement=ruleExpressionStatement 
	 { $current=$iv_ruleExpressionStatement.current; } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getLeftExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getRightExpressionParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssignmentAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIfStatementAccess().getIfStatementAction_0(),
            $current);
    }
)	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getIfKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getThenBlockStatementBlockParserRuleCall_5_0()); 
	    }
		lv_thenBlock_5_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"thenBlock",
        		lv_thenBlock_5_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getElseKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseBlockStatementBlockParserRuleCall_6_1_0()); 
	    }
		lv_elseBlock_7_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseBlock",
        		lv_elseBlock_7_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAdditionParserRuleCall()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getComparisonParserRuleCall_0()); 
    }
    this_Comparison_0=ruleComparison
    { 
        $current = $this_Comparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMultiOrDivLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getBooleanExpressionParserRuleCall_0()); 
    }
    this_BooleanExpression_0=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'>=' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'<' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'>' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

    |		lv_op_2_5=	'==' 
    {
        newLeafNode(lv_op_2_5, grammarAccess.getComparisonAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_5, null);
	    }

    |		lv_op_2_6=	'!=' 
    {
        newLeafNode(lv_op_2_6, grammarAccess.getComparisonAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_6, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightBooleanExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getAtomicParserRuleCall_0()); 
    }
    this_Atomic_0=ruleAtomic
    { 
        $current = $this_Atomic_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBooleanExpressionAccess().getAndOrExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'||' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getBooleanExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'&&' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getBooleanExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getRightAtomicParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAtomic		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Atomic");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	 iv_ruleAtomic=ruleAtomic 
	 { $current=$iv_ruleAtomic.current; } 
	 EOF 
;

// Rule Atomic
ruleAtomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getBooleanNegationAction_0_0(),
            $current);
    }
)	otherlv_1='!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtomicAccess().getExclamationMarkKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicAccess().getExpressionAtomicParserRuleCall_0_2_0()); 
	    }
		lv_expression_2_0=ruleAtomic		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Atomic");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getArithmeticSignedAction_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicAccess().getHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicAccess().getExpressionAtomicParserRuleCall_1_2_0()); 
	    }
		lv_expression_5_0=ruleAtomic		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Atomic");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicAccess().getTerminalExpressionParserRuleCall_2_0()); 
    }
    this_TerminalExpression_6=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_6.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAtomicAccess().getSelectionReceiverAction_2_1_0(),
            $current);
    }
)	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAtomicAccess().getFullStopKeyword_2_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicAccess().getMessageMessageParserRuleCall_2_1_2_0()); 
	    }
		lv_message_9_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRule());
	        }
       		set(
       			$current, 
       			"message",
        		lv_message_9_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getThisParserRuleCall_0()); 
    }
    this_This_0=ruleThis
    { 
        $current = $this_This_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getNullParserRuleCall_1()); 
    }
    this_Null_1=ruleNull
    { 
        $current = $this_Null_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getOriginalParserRuleCall_2()); 
    }
    this_Original_2=ruleOriginal
    { 
        $current = $this_Original_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getNewParserRuleCall_3()); 
    }
    this_New_3=ruleNew
    { 
        $current = $this_New_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getCastParserRuleCall_4()); 
    }
    this_Cast_4=ruleCast
    { 
        $current = $this_Cast_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getConstantParserRuleCall_5()); 
    }
    this_Constant_5=ruleConstant
    { 
        $current = $this_Constant_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getVariableAccessParserRuleCall_6()); 
    }
    this_VariableAccess_6=ruleVariableAccess
    { 
        $current = $this_VariableAccess_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getParenParserRuleCall_7()); 
    }
    this_Paren_7=ruleParen
    { 
        $current = $this_Paren_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNull
entryRuleNull returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullRule()); }
	 iv_ruleNull=ruleNull 
	 { $current=$iv_ruleNull.current; } 
	 EOF 
;

// Rule Null
ruleNull returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_null_0_0=	'null' 
    {
        newLeafNode(lv_null_0_0, grammarAccess.getNullAccess().getNullNullKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullRule());
	        }
       		setWithLastConsumed($current, "null", lv_null_0_0, "null");
	    }

)
)
;





// Entry rule entryRuleThis
entryRuleThis returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThisRule()); }
	 iv_ruleThis=ruleThis 
	 { $current=$iv_ruleThis.current; } 
	 EOF 
;

// Rule This
ruleThis returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_variable_0_0=	'this' 
    {
        newLeafNode(lv_variable_0_0, grammarAccess.getThisAccess().getVariableThisKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getThisRule());
	        }
       		setWithLastConsumed($current, "variable", lv_variable_0_0, "this");
	    }

)
)
;





// Entry rule entryRuleOriginal
entryRuleOriginal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOriginalRule()); }
	 iv_ruleOriginal=ruleOriginal 
	 { $current=$iv_ruleOriginal.current; } 
	 EOF 
;

// Rule Original
ruleOriginal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_method_0_0=	'original' 
    {
        newLeafNode(lv_method_0_0, grammarAccess.getOriginalAccess().getMethodOriginalKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOriginalRule());
	        }
       		setWithLastConsumed($current, "method", lv_method_0_0, "original");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOriginalAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOriginalAccess().getArgsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_args_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOriginalRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOriginalAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOriginalAccess().getArgsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_args_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOriginalRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOriginalAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleVariableAccess
entryRuleVariableAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableAccessRule()); }
	 iv_ruleVariableAccess=ruleVariableAccess 
	 { $current=$iv_ruleVariableAccess.current; } 
	 EOF 
;

// Rule VariableAccess
ruleVariableAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableAccessRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVariableAccessAccess().getVariableTypedDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleNew
entryRuleNew returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewRule()); }
	 iv_ruleNew=ruleNew 
	 { $current=$iv_ruleNew.current; } 
	 EOF 
;

// Rule New
ruleNew returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNewAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNewAccess().getClassClassNameParserRuleCall_1_0()); 
	    }
		lv_class_1_0=ruleClassName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewRule());
	        }
       		set(
       			$current, 
       			"class",
        		lv_class_1_0, 
        		"ClassName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNewAccess().getLeftParenthesisKeyword_2());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNewAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCast
entryRuleCast returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastRule()); }
	 iv_ruleCast=ruleCast 
	 { $current=$iv_ruleCast.current; } 
	 EOF 
;

// Rule Cast
ruleCast returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCastAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getTypeClassNameParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleClassName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ClassName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCastAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getObjectTerminalExpressionParserRuleCall_3_0()); 
	    }
		lv_object_3_0=ruleTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"object",
        		lv_object_3_0, 
        		"TerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParen
entryRuleParen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenRule()); }
	 iv_ruleParen=ruleParen 
	 { $current=$iv_ruleParen.current; } 
	 EOF 
;

// Rule Paren
ruleParen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getIntConstantParserRuleCall_0()); 
    }
    this_IntConstant_0=ruleIntConstant
    { 
        $current = $this_IntConstant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getBoolConstantParserRuleCall_1()); 
    }
    this_BoolConstant_1=ruleBoolConstant
    { 
        $current = $this_BoolConstant_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getStringConstantParserRuleCall_2()); 
    }
    this_StringConstant_2=ruleStringConstant
    { 
        $current = $this_StringConstant_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringConstant
entryRuleStringConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringConstantRule()); }
	 iv_ruleStringConstant=ruleStringConstant 
	 { $current=$iv_ruleStringConstant.current; } 
	 EOF 
;

// Rule StringConstant
ruleStringConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_constant_0_0=RULE_STRING
		{
			newLeafNode(lv_constant_0_0, grammarAccess.getStringConstantAccess().getConstantSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constant",
        		lv_constant_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntConstant
entryRuleIntConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntConstantRule()); }
	 iv_ruleIntConstant=ruleIntConstant 
	 { $current=$iv_ruleIntConstant.current; } 
	 EOF 
;

// Rule IntConstant
ruleIntConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_constant_0_0=RULE_INT
		{
			newLeafNode(lv_constant_0_0, grammarAccess.getIntConstantAccess().getConstantINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constant",
        		lv_constant_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleBoolConstant
entryRuleBoolConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolConstantRule()); }
	 iv_ruleBoolConstant=ruleBoolConstant 
	 { $current=$iv_ruleBoolConstant.current; } 
	 EOF 
;

// Rule BoolConstant
ruleBoolConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_constant_0_1=	'true' 
    {
        newLeafNode(lv_constant_0_1, grammarAccess.getBoolConstantAccess().getConstantTrueKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolConstantRule());
	        }
       		setWithLastConsumed($current, "constant", lv_constant_0_1, null);
	    }

    |		lv_constant_0_2=	'false' 
    {
        newLeafNode(lv_constant_0_2, grammarAccess.getBoolConstantAccess().getConstantFalseKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolConstantRule());
	        }
       		setWithLastConsumed($current, "constant", lv_constant_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMessageAccess().getFieldSelectionParserRuleCall_0()); 
    }
    this_FieldSelection_0=ruleFieldSelection
    { 
        $current = $this_FieldSelection_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMessageAccess().getMethodCallParserRuleCall_1()); 
    }
    this_MethodCall_1=ruleMethodCall
    { 
        $current = $this_MethodCall_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMethodCall
entryRuleMethodCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodCallRule()); }
	 iv_ruleMethodCall=ruleMethodCall 
	 { $current=$iv_ruleMethodCall.current; } 
	 EOF 
;

// Rule MethodCall
ruleMethodCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_method_0_0=RULE_ID
		{
			newLeafNode(lv_method_0_0, grammarAccess.getMethodCallAccess().getMethodIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"method",
        		lv_method_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getArgsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_args_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getArgsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_args_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFieldSelection
entryRuleFieldSelection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldSelectionRule()); }
	 iv_ruleFieldSelection=ruleFieldSelection 
	 { $current=$iv_ruleFieldSelection.current; } 
	 EOF 
;

// Rule FieldSelection
ruleFieldSelection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_field_0_0=RULE_ID
		{
			newLeafNode(lv_field_0_0, grammarAccess.getFieldSelectionAccess().getFieldIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldSelectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"field",
        		lv_field_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleDeltaModule
entryRuleDeltaModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeltaModuleRule()); }
	 iv_ruleDeltaModule=ruleDeltaModule 
	 { $current=$iv_ruleDeltaModule.current; } 
	 EOF 
;

// Rule DeltaModule
ruleDeltaModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='delta' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeltaModuleAccess().getDeltaKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDeltaModuleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeltaModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDeltaModuleAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeltaModuleAccess().getDeltaActionsDeltaActionParserRuleCall_3_0()); 
	    }
		lv_deltaActions_3_0=ruleDeltaAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeltaModuleRule());
	        }
       		add(
       			$current, 
       			"deltaActions",
        		lv_deltaActions_3_0, 
        		"DeltaAction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDeltaModuleAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDeltaAction
entryRuleDeltaAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeltaActionRule()); }
	 iv_ruleDeltaAction=ruleDeltaAction 
	 { $current=$iv_ruleDeltaAction.current; } 
	 EOF 
;

// Rule DeltaAction
ruleDeltaAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDeltaActionAccess().getClassAdditionParserRuleCall_0()); 
    }
    this_ClassAddition_0=ruleClassAddition
    { 
        $current = $this_ClassAddition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDeltaActionAccess().getRemovesOrModifiesClassParserRuleCall_1()); 
    }
    this_RemovesOrModifiesClass_1=ruleRemovesOrModifiesClass
    { 
        $current = $this_RemovesOrModifiesClass_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClassAddition
entryRuleClassAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassAdditionRule()); }
	 iv_ruleClassAddition=ruleClassAddition 
	 { $current=$iv_ruleClassAddition.current; } 
	 EOF 
;

// Rule ClassAddition
ruleClassAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='adds' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassAdditionAccess().getAddsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAdditionAccess().getClassClassParserRuleCall_1_0()); 
	    }
		lv_class_1_0=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassAdditionRule());
	        }
       		set(
       			$current, 
       			"class",
        		lv_class_1_0, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRemovesOrModifiesClass
entryRuleRemovesOrModifiesClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRemovesOrModifiesClassRule()); }
	 iv_ruleRemovesOrModifiesClass=ruleRemovesOrModifiesClass 
	 { $current=$iv_ruleRemovesOrModifiesClass.current; } 
	 EOF 
;

// Rule RemovesOrModifiesClass
ruleRemovesOrModifiesClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRemovesOrModifiesClassAccess().getClassRemovalParserRuleCall_0()); 
    }
    this_ClassRemoval_0=ruleClassRemoval
    { 
        $current = $this_ClassRemoval_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRemovesOrModifiesClassAccess().getClassModificationParserRuleCall_1()); 
    }
    this_ClassModification_1=ruleClassModification
    { 
        $current = $this_ClassModification_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClassRemoval
entryRuleClassRemoval returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRemovalRule()); }
	 iv_ruleClassRemoval=ruleClassRemoval 
	 { $current=$iv_ruleClassRemoval.current; } 
	 EOF 
;

// Rule ClassRemoval
ruleClassRemoval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='removes' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassRemovalAccess().getRemovesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassRemovalAccess().getNameClassNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleClassName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRemovalRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ClassName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassRemovalAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleClassModification
entryRuleClassModification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassModificationRule()); }
	 iv_ruleClassModification=ruleClassModification 
	 { $current=$iv_ruleClassModification.current; } 
	 EOF 
;

// Rule ClassModification
ruleClassModification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='modifies' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassModificationAccess().getModifiesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassModificationAccess().getNameClassNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleClassName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassModificationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ClassName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='extending' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassModificationAccess().getExtendingKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassModificationAccess().getExtendsClassNameParserRuleCall_2_1_0()); 
	    }
		lv_extends_3_0=ruleClassName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassModificationRule());
	        }
       		set(
       			$current, 
       			"extends",
        		lv_extends_3_0, 
        		"ClassName");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassModificationAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassModificationAccess().getSubActionsDeltaSubActionParserRuleCall_4_0()); 
	    }
		lv_subActions_5_0=ruleDeltaSubAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassModificationRule());
	        }
       		add(
       			$current, 
       			"subActions",
        		lv_subActions_5_0, 
        		"DeltaSubAction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassModificationAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleDeltaSubAction
entryRuleDeltaSubAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeltaSubActionRule()); }
	 iv_ruleDeltaSubAction=ruleDeltaSubAction 
	 { $current=$iv_ruleDeltaSubAction.current; } 
	 EOF 
;

// Rule DeltaSubAction
ruleDeltaSubAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDeltaSubActionAccess().getMethodOrFieldAdditionParserRuleCall_0()); 
    }
    this_MethodOrFieldAddition_0=ruleMethodOrFieldAddition
    { 
        $current = $this_MethodOrFieldAddition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDeltaSubActionAccess().getFieldRemovalParserRuleCall_1()); 
    }
    this_FieldRemoval_1=ruleFieldRemoval
    { 
        $current = $this_FieldRemoval_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDeltaSubActionAccess().getMethodRemovalParserRuleCall_2()); 
    }
    this_MethodRemoval_2=ruleMethodRemoval
    { 
        $current = $this_MethodRemoval_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDeltaSubActionAccess().getMethodModificationParserRuleCall_3()); 
    }
    this_MethodModification_3=ruleMethodModification
    { 
        $current = $this_MethodModification_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMethodOrFieldAddition
entryRuleMethodOrFieldAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodOrFieldAdditionRule()); }
	 iv_ruleMethodOrFieldAddition=ruleMethodOrFieldAddition 
	 { $current=$iv_ruleMethodOrFieldAddition.current; } 
	 EOF 
;

// Rule MethodOrFieldAddition
ruleMethodOrFieldAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMethodOrFieldAdditionAccess().getFieldAdditionParserRuleCall_0()); 
    }
    this_FieldAddition_0=ruleFieldAddition
    { 
        $current = $this_FieldAddition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMethodOrFieldAdditionAccess().getMethodAdditionParserRuleCall_1()); 
    }
    this_MethodAddition_1=ruleMethodAddition
    { 
        $current = $this_MethodAddition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFieldAddition
entryRuleFieldAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldAdditionRule()); }
	 iv_ruleFieldAddition=ruleFieldAddition 
	 { $current=$iv_ruleFieldAddition.current; } 
	 EOF 
;

// Rule FieldAddition
ruleFieldAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='adds' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFieldAdditionAccess().getAddsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAdditionAccess().getFieldFieldParserRuleCall_1_0()); 
	    }
		lv_field_1_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldAdditionRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_1_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMethodAddition
entryRuleMethodAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodAdditionRule()); }
	 iv_ruleMethodAddition=ruleMethodAddition 
	 { $current=$iv_ruleMethodAddition.current; } 
	 EOF 
;

// Rule MethodAddition
ruleMethodAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='adds' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMethodAdditionAccess().getAddsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAdditionAccess().getMethodMethodParserRuleCall_1_0()); 
	    }
		lv_method_1_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodAdditionRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_1_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFieldRemoval
entryRuleFieldRemoval returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRemovalRule()); }
	 iv_ruleFieldRemoval=ruleFieldRemoval 
	 { $current=$iv_ruleFieldRemoval.current; } 
	 EOF 
;

// Rule FieldRemoval
ruleFieldRemoval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='removesField' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFieldRemovalAccess().getRemovesFieldKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldRemovalAccess().getNameFieldNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleFieldName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRemovalRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FieldName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFieldRemovalAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleMethodRemoval
entryRuleMethodRemoval returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRemovalRule()); }
	 iv_ruleMethodRemoval=ruleMethodRemoval 
	 { $current=$iv_ruleMethodRemoval.current; } 
	 EOF 
;

// Rule MethodRemoval
ruleMethodRemoval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='removesMethod' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMethodRemovalAccess().getRemovesMethodKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodRemovalAccess().getNameMethodNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMethodName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRemovalRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MethodName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMethodRemovalAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleMethodModification
entryRuleMethodModification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodModificationRule()); }
	 iv_ruleMethodModification=ruleMethodModification 
	 { $current=$iv_ruleMethodModification.current; } 
	 EOF 
;

// Rule MethodModification
ruleMethodModification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='modifies' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMethodModificationAccess().getModifiesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodModificationAccess().getMethodMethodParserRuleCall_1_0()); 
	    }
		lv_method_1_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodModificationRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_1_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProductLine
entryRuleProductLine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductLineRule()); }
	 iv_ruleProductLine=ruleProductLine 
	 { $current=$iv_ruleProductLine.current; } 
	 EOF 
;

// Rule ProductLine
ruleProductLine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='spl' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProductLineAccess().getSplKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProductLineAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductLineRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProductLineAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProductLineAccess().getFeaturesFeaturesParserRuleCall_3_0()); 
	    }
		lv_features_3_0=ruleFeatures		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductLineRule());
	        }
       		set(
       			$current, 
       			"features",
        		lv_features_3_0, 
        		"Features");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProductLineAccess().getConfigurationsConfigurationsParserRuleCall_4_0()); 
	    }
		lv_configurations_4_0=ruleConfigurations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductLineRule());
	        }
       		set(
       			$current, 
       			"configurations",
        		lv_configurations_4_0, 
        		"Configurations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProductLineAccess().getPartitionDeltaPartitionParserRuleCall_5_0()); 
	    }
		lv_partition_5_0=ruleDeltaPartition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductLineRule());
	        }
       		set(
       			$current, 
       			"partition",
        		lv_partition_5_0, 
        		"DeltaPartition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProductLineAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleFeatures
entryRuleFeatures returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeaturesRule()); }
	 iv_ruleFeatures=ruleFeatures 
	 { $current=$iv_ruleFeatures.current; } 
	 EOF 
;

// Rule Features
ruleFeatures returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='features' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFeaturesAccess().getFeaturesKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFeaturesAccess().getFeaturesListFeatureParserRuleCall_1_0_0()); 
	    }
		lv_featuresList_1_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeaturesRule());
	        }
       		add(
       			$current, 
       			"featuresList",
        		lv_featuresList_1_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFeaturesAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeaturesAccess().getFeaturesListFeatureParserRuleCall_1_1_1_0()); 
	    }
		lv_featuresList_3_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeaturesRule());
	        }
       		add(
       			$current, 
       			"featuresList",
        		lv_featuresList_3_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleConfigurations
entryRuleConfigurations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigurationsRule()); }
	 iv_ruleConfigurations=ruleConfigurations 
	 { $current=$iv_ruleConfigurations.current; } 
	 EOF 
;

// Rule Configurations
ruleConfigurations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='configurations' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConfigurationsAccess().getConfigurationsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationsAccess().getConfigurationsConfigurationParserRuleCall_1_0()); 
	    }
		lv_configurations_1_0=ruleConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationsRule());
	        }
       		add(
       			$current, 
       			"configurations",
        		lv_configurations_1_0, 
        		"Configuration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConfigurationsAccess().getSemicolonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationsAccess().getConfigurationsConfigurationParserRuleCall_2_1_0()); 
	    }
		lv_configurations_3_0=ruleConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationsRule());
	        }
       		add(
       			$current, 
       			"configurations",
        		lv_configurations_3_0, 
        		"Configuration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	 iv_ruleConfiguration=ruleConfiguration 
	 { $current=$iv_ruleConfiguration.current; } 
	 EOF 
;

// Rule Configuration
ruleConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getFormulaPropositionalFormulaParserRuleCall_0()); 
	    }
		lv_formula_0_0=rulePropositionalFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		set(
       			$current, 
       			"formula",
        		lv_formula_0_0, 
        		"PropositionalFormula");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDeltaPartition
entryRuleDeltaPartition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeltaPartitionRule()); }
	 iv_ruleDeltaPartition=ruleDeltaPartition 
	 { $current=$iv_ruleDeltaPartition.current; } 
	 EOF 
;

// Rule DeltaPartition
ruleDeltaPartition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='deltas' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeltaPartitionAccess().getDeltasKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeltaPartitionAccess().getPartsPartitionPartParserRuleCall_1_0()); 
	    }
		lv_parts_1_0=rulePartitionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeltaPartitionRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_1_0, 
        		"PartitionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRulePartitionPart
entryRulePartitionPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPartitionPartRule()); }
	 iv_rulePartitionPart=rulePartitionPart 
	 { $current=$iv_rulePartitionPart.current; } 
	 EOF 
;

// Rule PartitionPart
rulePartitionPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPartitionPartAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPartitionPartAccess().getModuleReferencesModuleReferenceParserRuleCall_1_0()); 
	    }
		lv_moduleReferences_1_0=ruleModuleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPartitionPartRule());
	        }
       		add(
       			$current, 
       			"moduleReferences",
        		lv_moduleReferences_1_0, 
        		"ModuleReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPartitionPartAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPartitionPartAccess().getModuleReferencesModuleReferenceParserRuleCall_2_1_0()); 
	    }
		lv_moduleReferences_3_0=ruleModuleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPartitionPartRule());
	        }
       		add(
       			$current, 
       			"moduleReferences",
        		lv_moduleReferences_3_0, 
        		"ModuleReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPartitionPartAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleModuleReference
entryRuleModuleReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleReferenceRule()); }
	 iv_ruleModuleReference=ruleModuleReference 
	 { $current=$iv_ruleModuleReference.current; } 
	 EOF 
;

// Rule ModuleReference
ruleModuleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getModuleReferenceAccess().getDeltaModuleDeltaModuleCrossReference_0_0()); 
	}

)
)(	otherlv_1='when' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleReferenceAccess().getWhenKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleReferenceAccess().getWhenPropositionalFormulaParserRuleCall_1_1_0()); 
	    }
		lv_when_2_0=rulePropositionalFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleReferenceRule());
	        }
       		set(
       			$current, 
       			"when",
        		lv_when_2_0, 
        		"PropositionalFormula");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePropositionalFormula
entryRulePropositionalFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropositionalFormulaRule()); }
	 iv_rulePropositionalFormula=rulePropositionalFormula 
	 { $current=$iv_rulePropositionalFormula.current; } 
	 EOF 
;

// Rule PropositionalFormula
rulePropositionalFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropositionalFormulaAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPropositionalFormulaAccess().getOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropositionalFormulaAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropositionalFormulaAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropositionalFormulaRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getFeatureRefAction_0_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getFeatureFeatureCrossReference_0_1_0()); 
	}

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getPropParenAction_1_0(),
            $current);
    }
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getFormulaPropositionalFormulaParserRuleCall_1_2_0()); 
	    }
		lv_formula_4_0=rulePropositionalFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"formula",
        		lv_formula_4_0, 
        		"PropositionalFormula");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_3());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getNegationAction_2_0(),
            $current);
    }
)	otherlv_7='!' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getFormulaPrimaryParserRuleCall_2_2_0()); 
	    }
		lv_formula_8_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"formula",
        		lv_formula_8_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getPropTrueAction_3_0(),
            $current);
    }
)	otherlv_10='true' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPrimaryAccess().getTrueKeyword_3_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getPropFalseAction_4_0(),
            $current);
    }
)	otherlv_12='false' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPrimaryAccess().getFalseKeyword_4_1());
    }
))
;





// Entry rule entryRuleProduct
entryRuleProduct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductRule()); }
	 iv_ruleProduct=ruleProduct 
	 { $current=$iv_ruleProduct.current; } 
	 EOF 
;

// Rule Product
ruleProduct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='product' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProductAccess().getProductKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProductAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProductAccess().getFromKeyword_2());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getProductAccess().getProductLineProductLineCrossReference_3_0()); 
	}

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProductAccess().getColonKeyword_4());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProductAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getProductAccess().getFeaturesFeatureCrossReference_6_0()); 
	}

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getProductAccess().getCommaKeyword_7_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getProductAccess().getFeaturesFeatureCrossReference_7_1_0()); 
	}

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getProductAccess().getRightCurlyBracketKeyword_8());
    }
)
;





RULE_JAVAVERBATIM : '**Java:' ( options {greedy=false;} : . )*':Java**';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


