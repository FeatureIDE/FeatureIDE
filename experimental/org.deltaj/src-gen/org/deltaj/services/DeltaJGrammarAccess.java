/*
* generated by Xtext
*/

package org.deltaj.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DeltaJGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeltaModulesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeltaModulesDeltaModuleParserRuleCall_0_0 = (RuleCall)cDeltaModulesAssignment_0.eContents().get(0);
		private final Assignment cProductLinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProductLinesProductLineParserRuleCall_1_0 = (RuleCall)cProductLinesAssignment_1.eContents().get(0);
		private final Assignment cProductsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProductsProductParserRuleCall_2_0 = (RuleCall)cProductsAssignment_2.eContents().get(0);
		
		//Program:
		//	deltaModules+=DeltaModule* productLines+=ProductLine* products+=Product*;
		public ParserRule getRule() { return rule; }

		//deltaModules+=DeltaModule* productLines+=ProductLine* products+=Product*
		public Group getGroup() { return cGroup; }

		//deltaModules+=DeltaModule*
		public Assignment getDeltaModulesAssignment_0() { return cDeltaModulesAssignment_0; }

		//DeltaModule
		public RuleCall getDeltaModulesDeltaModuleParserRuleCall_0_0() { return cDeltaModulesDeltaModuleParserRuleCall_0_0; }

		//productLines+=ProductLine*
		public Assignment getProductLinesAssignment_1() { return cProductLinesAssignment_1; }

		//ProductLine
		public RuleCall getProductLinesProductLineParserRuleCall_1_0() { return cProductLinesProductLineParserRuleCall_1_0; }

		//products+=Product*
		public Assignment getProductsAssignment_2() { return cProductsAssignment_2; }

		//Product
		public RuleCall getProductsProductParserRuleCall_2_0() { return cProductsProductParserRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeForMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	TypeVariable | TypeForMethod;
		public ParserRule getRule() { return rule; }

		//TypeVariable | TypeForMethod
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeVariable
		public RuleCall getTypeVariableParserRuleCall_0() { return cTypeVariableParserRuleCall_0; }

		//TypeForMethod
		public RuleCall getTypeForMethodParserRuleCall_1() { return cTypeForMethodParserRuleCall_1; }
	}

	public class TypeVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeVariable");
		private final Assignment cVarNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarNameTypeVariableIdParserRuleCall_0 = (RuleCall)cVarNameAssignment.eContents().get(0);
		
		/// * 
		// * TypeVariable cannot be written in the syntax but used only
		// * by the type system
		// * / TypeVariable:
		//	varName=TypeVariableId;
		public ParserRule getRule() { return rule; }

		//varName=TypeVariableId
		public Assignment getVarNameAssignment() { return cVarNameAssignment; }

		//TypeVariableId
		public RuleCall getVarNameTypeVariableIdParserRuleCall_0() { return cVarNameTypeVariableIdParserRuleCall_0; }
	}

	public class TypeVariableIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeVariableId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TypeVariableId:
		//	"<" INT ">";
		public ParserRule getRule() { return rule; }

		//"<" INT ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class TypeForMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeForMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVoidTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeForDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeForMethod:
		//	VoidType | TypeForDeclaration;
		public ParserRule getRule() { return rule; }

		//VoidType | TypeForDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//VoidType
		public RuleCall getVoidTypeParserRuleCall_0() { return cVoidTypeParserRuleCall_0; }

		//TypeForDeclaration
		public RuleCall getTypeForDeclarationParserRuleCall_1() { return cTypeForDeclarationParserRuleCall_1; }
	}

	public class VoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VoidType");
		private final Assignment cVoidAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cVoidVoidKeyword_0 = (Keyword)cVoidAssignment.eContents().get(0);
		
		//VoidType:
		//	void="void";
		public ParserRule getRule() { return rule; }

		//void="void"
		public Assignment getVoidAssignment() { return cVoidAssignment; }

		//"void"
		public Keyword getVoidVoidKeyword_0() { return cVoidVoidKeyword_0; }
	}

	public class TypeForDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeForDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeForDeclaration:
		//	BasicType | ClassType;
		public ParserRule getRule() { return rule; }

		//BasicType | ClassType
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//ClassType
		public RuleCall getClassTypeParserRuleCall_1() { return cClassTypeParserRuleCall_1; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BasicType:
		//	IntType | BooleanType | StringType;
		public ParserRule getRule() { return rule; }

		//IntType | BooleanType | StringType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_0() { return cIntTypeParserRuleCall_0; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_1() { return cBooleanTypeParserRuleCall_1; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_2() { return cStringTypeParserRuleCall_2; }
	}

	public class IntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntType");
		private final Assignment cBasicAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cBasicIntKeyword_0 = (Keyword)cBasicAssignment.eContents().get(0);
		
		//IntType:
		//	basic="int";
		public ParserRule getRule() { return rule; }

		//basic="int"
		public Assignment getBasicAssignment() { return cBasicAssignment; }

		//"int"
		public Keyword getBasicIntKeyword_0() { return cBasicIntKeyword_0; }
	}

	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanType");
		private final Assignment cBasicAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cBasicBooleanKeyword_0 = (Keyword)cBasicAssignment.eContents().get(0);
		
		//BooleanType:
		//	basic="boolean";
		public ParserRule getRule() { return rule; }

		//basic="boolean"
		public Assignment getBasicAssignment() { return cBasicAssignment; }

		//"boolean"
		public Keyword getBasicBooleanKeyword_0() { return cBasicBooleanKeyword_0; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringType");
		private final Assignment cBasicAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cBasicStringKeyword_0 = (Keyword)cBasicAssignment.eContents().get(0);
		
		//StringType:
		//	basic="String";
		public ParserRule getRule() { return rule; }

		//basic="String"
		public Assignment getBasicAssignment() { return cBasicAssignment; }

		//"String"
		public Keyword getBasicStringKeyword_0() { return cBasicStringKeyword_0; }
	}

	public class ClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassType");
		private final Assignment cClassrefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cClassrefClassNameParserRuleCall_0 = (RuleCall)cClassrefAssignment.eContents().get(0);
		
		//ClassType:
		//	classref=ClassName;
		public ParserRule getRule() { return rule; }

		//classref=ClassName
		public Assignment getClassrefAssignment() { return cClassrefAssignment; }

		//ClassName
		public RuleCall getClassrefClassNameParserRuleCall_0() { return cClassrefClassNameParserRuleCall_0; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExtendsClassNameParserRuleCall_2_1_0 = (RuleCall)cExtendsAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsFieldParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		private final Assignment cMethodsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodsMethodParserRuleCall_5_0 = (RuleCall)cMethodsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Class:
		//	"class" name=ID ("extends" extends=ClassName)? "{" fields+=Field* methods+=Method* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("extends" extends=ClassName)? "{" fields+=Field* methods+=Method* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" extends=ClassName)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//extends=ClassName
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }

		//ClassName
		public RuleCall getExtendsClassNameParserRuleCall_2_1_0() { return cExtendsClassNameParserRuleCall_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//fields+=Field*
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_4_0() { return cFieldsFieldParserRuleCall_4_0; }

		//methods+=Method*
		public Assignment getMethodsAssignment_5() { return cMethodsAssignment_5; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_5_0() { return cMethodsMethodParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ClassNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MethodName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class TypedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypedDeclaration:
		//	Field | LocalVariableDeclaration | Parameter;
		public ParserRule getRule() { return rule; }

		//Field | LocalVariableDeclaration | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }

		//LocalVariableDeclaration
		public RuleCall getLocalVariableDeclarationParserRuleCall_1() { return cLocalVariableDeclarationParserRuleCall_1; }

		//Parameter
		public RuleCall getParameterParserRuleCall_2() { return cParameterParserRuleCall_2; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeForDeclarationParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Field:
		//	type=TypeForDeclaration name=ID ";";
		public ParserRule getRule() { return rule; }

		//type=TypeForDeclaration name=ID ";"
		public Group getGroup() { return cGroup; }

		//type=TypeForDeclaration
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeForDeclaration
		public RuleCall getTypeTypeForDeclarationParserRuleCall_0_0() { return cTypeTypeForDeclarationParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class LocalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeForDeclarationParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LocalVariableDeclaration:
		//	type=TypeForDeclaration name=ID ";";
		public ParserRule getRule() { return rule; }

		//type=TypeForDeclaration name=ID ";"
		public Group getGroup() { return cGroup; }

		//type=TypeForDeclaration
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeForDeclaration
		public RuleCall getTypeTypeForDeclarationParserRuleCall_0_0() { return cTypeTypeForDeclarationParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeForDeclarationParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=TypeForDeclaration name=ID;
		public ParserRule getRule() { return rule; }

		//type=TypeForDeclaration name=ID
		public Group getGroup() { return cGroup; }

		//type=TypeForDeclaration
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeForDeclaration
		public RuleCall getTypeTypeForDeclarationParserRuleCall_0_0() { return cTypeTypeForDeclarationParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturntypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturntypeTypeForMethodParserRuleCall_0_0 = (RuleCall)cReturntypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyStatementBlockParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//Method:
		//	returntype=TypeForMethod name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" body=StatementBlock?;
		public ParserRule getRule() { return rule; }

		//returntype=TypeForMethod name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" body=StatementBlock?
		public Group getGroup() { return cGroup; }

		//returntype=TypeForMethod
		public Assignment getReturntypeAssignment_0() { return cReturntypeAssignment_0; }

		//TypeForMethod
		public RuleCall getReturntypeTypeForMethodParserRuleCall_0_0() { return cReturntypeTypeForMethodParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0_0() { return cParamsParameterParserRuleCall_3_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_1_1_0() { return cParamsParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=StatementBlock?
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//StatementBlock
		public RuleCall getBodyStatementBlockParserRuleCall_5_0() { return cBodyStatementBlockParserRuleCall_5_0; }
	}

	public class StatementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocalvariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocalvariablesLocalVariableDeclarationParserRuleCall_2_0 = (RuleCall)cLocalvariablesAssignment_2.eContents().get(0);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsReturnStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StatementBlock:
		//	{StatementBlock} "{" localvariables+=LocalVariableDeclaration* statements+=Statement* statements+=ReturnStatement?
		//	"}";
		public ParserRule getRule() { return rule; }

		//{StatementBlock} "{" localvariables+=LocalVariableDeclaration* statements+=Statement* statements+=ReturnStatement? "}"
		public Group getGroup() { return cGroup; }

		//{StatementBlock}
		public Action getStatementBlockAction_0() { return cStatementBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//localvariables+=LocalVariableDeclaration*
		public Assignment getLocalvariablesAssignment_2() { return cLocalvariablesAssignment_2; }

		//LocalVariableDeclaration
		public RuleCall getLocalvariablesLocalVariableDeclarationParserRuleCall_2_0() { return cLocalvariablesLocalVariableDeclarationParserRuleCall_2_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }

		//statements+=ReturnStatement?
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//ReturnStatement
		public RuleCall getStatementsReturnStatementParserRuleCall_4_0() { return cStatementsReturnStatementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement returns Statement:
		//	{ReturnStatement} "return" expression=Expression? ";";
		public ParserRule getRule() { return rule; }

		//{ReturnStatement} "return" expression=Expression? ";"
		public Group getGroup() { return cGroup; }

		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cJavaVerbatimAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVerbatimAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVerbatimJAVAVERBATIMTerminalRuleCall_3_1_0 = (RuleCall)cVerbatimAssignment_3_1.eContents().get(0);
		
		//Statement:
		//	ExpressionStatement | Assignment | IfStatement | {JavaVerbatim} verbatim=JAVAVERBATIM;
		public ParserRule getRule() { return rule; }

		//ExpressionStatement | Assignment | IfStatement | {JavaVerbatim} verbatim=JAVAVERBATIM
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_0() { return cExpressionStatementParserRuleCall_0; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_2() { return cIfStatementParserRuleCall_2; }

		//{JavaVerbatim} verbatim=JAVAVERBATIM
		public Group getGroup_3() { return cGroup_3; }

		//{JavaVerbatim}
		public Action getJavaVerbatimAction_3_0() { return cJavaVerbatimAction_3_0; }

		//verbatim=JAVAVERBATIM
		public Assignment getVerbatimAssignment_3_1() { return cVerbatimAssignment_3_1; }

		//JAVAVERBATIM
		public RuleCall getVerbatimJAVAVERBATIMTerminalRuleCall_3_1_0() { return cVerbatimJAVAVERBATIMTerminalRuleCall_3_1_0; }
	}

	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExpressionStatement:
		//	expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Assignment:
		//	left=Expression "=" right=Expression ";";
		public ParserRule getRule() { return rule; }

		//left=Expression "=" right=Expression ";"
		public Group getGroup() { return cGroup; }

		//left=Expression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_0_0() { return cLeftExpressionParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//right=Expression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_0() { return cRightExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenBlockStatementBlockParserRuleCall_5_0 = (RuleCall)cThenBlockAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseBlockAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseBlockStatementBlockParserRuleCall_6_1_0 = (RuleCall)cElseBlockAssignment_6_1.eContents().get(0);
		
		//IfStatement:
		//	{IfStatement} "if" "(" expression=Expression ")" thenBlock=StatementBlock ("else" elseBlock=StatementBlock)?;
		public ParserRule getRule() { return rule; }

		//{IfStatement} "if" "(" expression=Expression ")" thenBlock=StatementBlock ("else" elseBlock=StatementBlock)?
		public Group getGroup() { return cGroup; }

		//{IfStatement}
		public Action getIfStatementAction_0() { return cIfStatementAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//thenBlock=StatementBlock
		public Assignment getThenBlockAssignment_5() { return cThenBlockAssignment_5; }

		//StatementBlock
		public RuleCall getThenBlockStatementBlockParserRuleCall_5_0() { return cThenBlockStatementBlockParserRuleCall_5_0; }

		//("else" elseBlock=StatementBlock)?
		public Group getGroup_6() { return cGroup_6; }

		//"else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//elseBlock=StatementBlock
		public Assignment getElseBlockAssignment_6_1() { return cElseBlockAssignment_6_1; }

		//StatementBlock
		public RuleCall getElseBlockStatementBlockParserRuleCall_6_1_0() { return cElseBlockStatementBlockParserRuleCall_6_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Addition;
		public ParserRule getRule() { return rule; }

		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Comparison ({MultiOrDiv.left=current} op=("*" | "/") right=Comparison)*;
		public ParserRule getRule() { return rule; }

		//Comparison ({MultiOrDiv.left=current} op=("*" | "/") right=Comparison)*
		public Group getGroup() { return cGroup; }

		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }

		//({MultiOrDiv.left=current} op=("*" | "/") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{MultiOrDiv.left=current}
		public Action getMultiOrDivLeftAction_1_0() { return cMultiOrDivLeftAction_1_0; }

		//op=("*" | "/")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"*" | "/"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }

		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_4 = (Keyword)cOpAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_5 = (Keyword)cOpAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBooleanExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression:
		//	BooleanExpression ({Comparison.left=current} op=(">=" | "<=" | "<" | ">" | "==" | "!=") right=BooleanExpression)*;
		public ParserRule getRule() { return rule; }

		//BooleanExpression ({Comparison.left=current} op=(">=" | "<=" | "<" | ">" | "==" | "!=") right=BooleanExpression)*
		public Group getGroup() { return cGroup; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_0() { return cBooleanExpressionParserRuleCall_0; }

		//({Comparison.left=current} op=(">=" | "<=" | "<" | ">" | "==" | "!=") right=BooleanExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }

		//op=(">=" | "<=" | "<" | ">" | "==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//">=" | "<=" | "<" | ">" | "==" | "!="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_2() { return cOpLessThanSignKeyword_1_1_0_2; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_3() { return cOpGreaterThanSignKeyword_1_1_0_3; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_4() { return cOpEqualsSignEqualsSignKeyword_1_1_0_4; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_5() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_5; }

		//right=BooleanExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BooleanExpression
		public RuleCall getRightBooleanExpressionParserRuleCall_1_2_0() { return cRightBooleanExpressionParserRuleCall_1_2_0; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAtomicParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BooleanExpression returns Expression:
		//	Atomic ({AndOrExpression.left=current} op=("||" | "&&") right=Atomic)*;
		public ParserRule getRule() { return rule; }

		//Atomic ({AndOrExpression.left=current} op=("||" | "&&") right=Atomic)*
		public Group getGroup() { return cGroup; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }

		//({AndOrExpression.left=current} op=("||" | "&&") right=Atomic)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndOrExpression.left=current}
		public Action getAndOrExpressionLeftAction_1_0() { return cAndOrExpressionLeftAction_1_0; }

		//op=("||" | "&&")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"||" | "&&"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"||"
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0_0; }

		//"&&"
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0_1() { return cOpAmpersandAmpersandKeyword_1_1_0_1; }

		//right=Atomic
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Atomic
		public RuleCall getRightAtomicParserRuleCall_1_2_0() { return cRightAtomicParserRuleCall_1_2_0; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanNegationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cArithmeticSignedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cTerminalExpressionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Action cSelectionReceiverAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cMessageAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cMessageMessageParserRuleCall_2_1_2_0 = (RuleCall)cMessageAssignment_2_1_2.eContents().get(0);
		
		//Atomic returns Expression:
		//	{BooleanNegation} "!" expression=Atomic / * right associativity * / / * right associativity * / | {ArithmeticSigned} "-"
		//	expression=Atomic | TerminalExpression ({Selection.receiver=current} "." message=Message)*;
		public ParserRule getRule() { return rule; }

		//{BooleanNegation} "!" expression=Atomic / * right associativity * / / * right associativity * / | {ArithmeticSigned} "-"
		//expression=Atomic | TerminalExpression ({Selection.receiver=current} "." message=Message)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BooleanNegation} "!" expression=Atomic
		public Group getGroup_0() { return cGroup_0; }

		//{BooleanNegation}
		public Action getBooleanNegationAction_0_0() { return cBooleanNegationAction_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }

		//expression=Atomic
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }

		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_0_2_0() { return cExpressionAtomicParserRuleCall_0_2_0; }

		//{ArithmeticSigned} "-" expression=Atomic
		public Group getGroup_1() { return cGroup_1; }

		//{ArithmeticSigned}
		public Action getArithmeticSignedAction_1_0() { return cArithmeticSignedAction_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//expression=Atomic
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_1_2_0() { return cExpressionAtomicParserRuleCall_1_2_0; }

		//TerminalExpression ({Selection.receiver=current} "." message=Message)*
		public Group getGroup_2() { return cGroup_2; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_2_0() { return cTerminalExpressionParserRuleCall_2_0; }

		//({Selection.receiver=current} "." message=Message)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//{Selection.receiver=current}
		public Action getSelectionReceiverAction_2_1_0() { return cSelectionReceiverAction_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_2_1_1() { return cFullStopKeyword_2_1_1; }

		//message=Message
		public Assignment getMessageAssignment_2_1_2() { return cMessageAssignment_2_1_2; }

		//Message
		public RuleCall getMessageMessageParserRuleCall_2_1_2_0() { return cMessageMessageParserRuleCall_2_1_2_0; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cThisParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNullParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOriginalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNewParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCastParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConstantParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVariableAccessParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cParenParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//TerminalExpression returns Expression:
		//	This | Null | Original | New | Cast | Constant | VariableAccess | Paren;
		public ParserRule getRule() { return rule; }

		//This | Null | Original | New | Cast | Constant | VariableAccess | Paren
		public Alternatives getAlternatives() { return cAlternatives; }

		//This
		public RuleCall getThisParserRuleCall_0() { return cThisParserRuleCall_0; }

		//Null
		public RuleCall getNullParserRuleCall_1() { return cNullParserRuleCall_1; }

		//Original
		public RuleCall getOriginalParserRuleCall_2() { return cOriginalParserRuleCall_2; }

		//New
		public RuleCall getNewParserRuleCall_3() { return cNewParserRuleCall_3; }

		//Cast
		public RuleCall getCastParserRuleCall_4() { return cCastParserRuleCall_4; }

		//Constant
		public RuleCall getConstantParserRuleCall_5() { return cConstantParserRuleCall_5; }

		//VariableAccess
		public RuleCall getVariableAccessParserRuleCall_6() { return cVariableAccessParserRuleCall_6; }

		//Paren
		public RuleCall getParenParserRuleCall_7() { return cParenParserRuleCall_7; }
	}

	public class NullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Null");
		private final Assignment cNullAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNullNullKeyword_0 = (Keyword)cNullAssignment.eContents().get(0);
		
		//Null:
		//	null="null";
		public ParserRule getRule() { return rule; }

		//null="null"
		public Assignment getNullAssignment() { return cNullAssignment; }

		//"null"
		public Keyword getNullNullKeyword_0() { return cNullNullKeyword_0; }
	}

	public class ThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "This");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cVariableThisKeyword_0 = (Keyword)cVariableAssignment.eContents().get(0);
		
		//This:
		//	variable="this";
		public ParserRule getRule() { return rule; }

		//variable="this"
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//"this"
		public Keyword getVariableThisKeyword_0() { return cVariableThisKeyword_0; }
	}

	public class OriginalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Original");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMethodOriginalKeyword_0_0 = (Keyword)cMethodAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Original:
		//	method="original" "(" (args+=Expression ("," args+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//method="original" "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//method="original"
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }

		//"original"
		public Keyword getMethodOriginalKeyword_0_0() { return cMethodOriginalKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Expression
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0_0() { return cArgsExpressionParserRuleCall_2_0_0; }

		//("," args+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class VariableAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAccess");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableTypedDeclarationCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableTypedDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVariableTypedDeclarationCrossReference_0.eContents().get(1);
		
		//VariableAccess:
		//	variable=[TypedDeclaration];
		public ParserRule getRule() { return rule; }

		//variable=[TypedDeclaration]
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//[TypedDeclaration]
		public CrossReference getVariableTypedDeclarationCrossReference_0() { return cVariableTypedDeclarationCrossReference_0; }

		//ID
		public RuleCall getVariableTypedDeclarationIDTerminalRuleCall_0_1() { return cVariableTypedDeclarationIDTerminalRuleCall_0_1; }
	}

	public class NewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "New");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassClassNameParserRuleCall_1_0 = (RuleCall)cClassAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//New:
		//	"new" class=ClassName "(" / * (args+=Expression (',' args+=Expression)*)? * / ")";
		public ParserRule getRule() { return rule; }

		//"new" class=ClassName "(" / * (args+=Expression (',' args+=Expression)*)? * / ")"
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//class=ClassName
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }

		//ClassName
		public RuleCall getClassClassNameParserRuleCall_1_0() { return cClassClassNameParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		/// * (args+=Expression (',' args+=Expression)*)? * / ")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectTerminalExpressionParserRuleCall_3_0 = (RuleCall)cObjectAssignment_3.eContents().get(0);
		
		//Cast:
		//	"(" type=ClassName ")" object=TerminalExpression;
		public ParserRule getRule() { return rule; }

		//"(" type=ClassName ")" object=TerminalExpression
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//type=ClassName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ClassName
		public RuleCall getTypeClassNameParserRuleCall_1_0() { return cTypeClassNameParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//object=TerminalExpression
		public Assignment getObjectAssignment_3() { return cObjectAssignment_3; }

		//TerminalExpression
		public RuleCall getObjectTerminalExpressionParserRuleCall_3_0() { return cObjectTerminalExpressionParserRuleCall_3_0; }
	}

	public class ParenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Paren");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Paren:
		//	"(" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constant:
		//	IntConstant | BoolConstant | StringConstant;
		public ParserRule getRule() { return rule; }

		//IntConstant | BoolConstant | StringConstant
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntConstant
		public RuleCall getIntConstantParserRuleCall_0() { return cIntConstantParserRuleCall_0; }

		//BoolConstant
		public RuleCall getBoolConstantParserRuleCall_1() { return cBoolConstantParserRuleCall_1; }

		//StringConstant
		public RuleCall getStringConstantParserRuleCall_2() { return cStringConstantParserRuleCall_2; }
	}

	public class StringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstantSTRINGTerminalRuleCall_0 = (RuleCall)cConstantAssignment.eContents().get(0);
		
		//StringConstant:
		//	constant=STRING;
		public ParserRule getRule() { return rule; }

		//constant=STRING
		public Assignment getConstantAssignment() { return cConstantAssignment; }

		//STRING
		public RuleCall getConstantSTRINGTerminalRuleCall_0() { return cConstantSTRINGTerminalRuleCall_0; }
	}

	public class IntConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstantINTTerminalRuleCall_0 = (RuleCall)cConstantAssignment.eContents().get(0);
		
		//IntConstant:
		//	constant=INT;
		public ParserRule getRule() { return rule; }

		//constant=INT
		public Assignment getConstantAssignment() { return cConstantAssignment; }

		//INT
		public RuleCall getConstantINTTerminalRuleCall_0() { return cConstantINTTerminalRuleCall_0; }
	}

	public class BoolConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cConstantAlternatives_0 = (Alternatives)cConstantAssignment.eContents().get(0);
		private final Keyword cConstantTrueKeyword_0_0 = (Keyword)cConstantAlternatives_0.eContents().get(0);
		private final Keyword cConstantFalseKeyword_0_1 = (Keyword)cConstantAlternatives_0.eContents().get(1);
		
		//BoolConstant:
		//	constant=("true" | "false");
		public ParserRule getRule() { return rule; }

		//constant=("true" | "false")
		public Assignment getConstantAssignment() { return cConstantAssignment; }

		//"true" | "false"
		public Alternatives getConstantAlternatives_0() { return cConstantAlternatives_0; }

		//"true"
		public Keyword getConstantTrueKeyword_0_0() { return cConstantTrueKeyword_0_0; }

		//"false"
		public Keyword getConstantFalseKeyword_0_1() { return cConstantFalseKeyword_0_1; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldSelectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Message:
		//	FieldSelection | MethodCall;
		public ParserRule getRule() { return rule; }

		//FieldSelection | MethodCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//FieldSelection
		public RuleCall getFieldSelectionParserRuleCall_0() { return cFieldSelectionParserRuleCall_0; }

		//MethodCall
		public RuleCall getMethodCallParserRuleCall_1() { return cMethodCallParserRuleCall_1; }
	}

	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMethodIDTerminalRuleCall_0_0 = (RuleCall)cMethodAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodCall:
		//	method=ID "(" (args+=Expression ("," args+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//method=ID "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//method=ID
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }

		//ID
		public RuleCall getMethodIDTerminalRuleCall_0_0() { return cMethodIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Expression
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0_0() { return cArgsExpressionParserRuleCall_2_0_0; }

		//("," args+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FieldSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldSelection");
		private final Assignment cFieldAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFieldIDTerminalRuleCall_0 = (RuleCall)cFieldAssignment.eContents().get(0);
		
		//FieldSelection:
		//	field=ID;
		public ParserRule getRule() { return rule; }

		//field=ID
		public Assignment getFieldAssignment() { return cFieldAssignment; }

		//ID
		public RuleCall getFieldIDTerminalRuleCall_0() { return cFieldIDTerminalRuleCall_0; }
	}

	public class DeltaModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeltaModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeltaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeltaActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeltaActionsDeltaActionParserRuleCall_3_0 = (RuleCall)cDeltaActionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeltaModule:
		//	"delta" name=ID "{" deltaActions+=DeltaAction* "}";
		public ParserRule getRule() { return rule; }

		//"delta" name=ID "{" deltaActions+=DeltaAction* "}"
		public Group getGroup() { return cGroup; }

		//"delta"
		public Keyword getDeltaKeyword_0() { return cDeltaKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//deltaActions+=DeltaAction*
		public Assignment getDeltaActionsAssignment_3() { return cDeltaActionsAssignment_3; }

		//DeltaAction
		public RuleCall getDeltaActionsDeltaActionParserRuleCall_3_0() { return cDeltaActionsDeltaActionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DeltaActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeltaAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassAdditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRemovesOrModifiesClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeltaAction:
		//	ClassAddition | RemovesOrModifiesClass;
		public ParserRule getRule() { return rule; }

		//ClassAddition | RemovesOrModifiesClass
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassAddition
		public RuleCall getClassAdditionParserRuleCall_0() { return cClassAdditionParserRuleCall_0; }

		//RemovesOrModifiesClass
		public RuleCall getRemovesOrModifiesClassParserRuleCall_1() { return cRemovesOrModifiesClassParserRuleCall_1; }
	}

	public class ClassAdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassAddition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassClassParserRuleCall_1_0 = (RuleCall)cClassAssignment_1.eContents().get(0);
		
		//ClassAddition:
		//	"adds" class=Class;
		public ParserRule getRule() { return rule; }

		//"adds" class=Class
		public Group getGroup() { return cGroup; }

		//"adds"
		public Keyword getAddsKeyword_0() { return cAddsKeyword_0; }

		//class=Class
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }

		//Class
		public RuleCall getClassClassParserRuleCall_1_0() { return cClassClassParserRuleCall_1_0; }
	}

	public class RemovesOrModifiesClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemovesOrModifiesClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassRemovalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassModificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RemovesOrModifiesClass:
		//	ClassRemoval | ClassModification;
		public ParserRule getRule() { return rule; }

		//ClassRemoval | ClassModification
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassRemoval
		public RuleCall getClassRemovalParserRuleCall_0() { return cClassRemovalParserRuleCall_0; }

		//ClassModification
		public RuleCall getClassModificationParserRuleCall_1() { return cClassModificationParserRuleCall_1; }
	}

	public class ClassRemovalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassRemoval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemovesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameClassNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ClassRemoval:
		//	"removes" name=ClassName ";";
		public ParserRule getRule() { return rule; }

		//"removes" name=ClassName ";"
		public Group getGroup() { return cGroup; }

		//"removes"
		public Keyword getRemovesKeyword_0() { return cRemovesKeyword_0; }

		//name=ClassName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ClassName
		public RuleCall getNameClassNameParserRuleCall_1_0() { return cNameClassNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ClassModificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassModification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameClassNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExtendsClassNameParserRuleCall_2_1_0 = (RuleCall)cExtendsAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSubActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSubActionsDeltaSubActionParserRuleCall_4_0 = (RuleCall)cSubActionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ClassModification:
		//	"modifies" name=ClassName ("extending" extends=ClassName)? "{" subActions+=DeltaSubAction* "}";
		public ParserRule getRule() { return rule; }

		//"modifies" name=ClassName ("extending" extends=ClassName)? "{" subActions+=DeltaSubAction* "}"
		public Group getGroup() { return cGroup; }

		//"modifies"
		public Keyword getModifiesKeyword_0() { return cModifiesKeyword_0; }

		//name=ClassName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ClassName
		public RuleCall getNameClassNameParserRuleCall_1_0() { return cNameClassNameParserRuleCall_1_0; }

		//("extending" extends=ClassName)?
		public Group getGroup_2() { return cGroup_2; }

		//"extending"
		public Keyword getExtendingKeyword_2_0() { return cExtendingKeyword_2_0; }

		//extends=ClassName
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }

		//ClassName
		public RuleCall getExtendsClassNameParserRuleCall_2_1_0() { return cExtendsClassNameParserRuleCall_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//subActions+=DeltaSubAction*
		public Assignment getSubActionsAssignment_4() { return cSubActionsAssignment_4; }

		//DeltaSubAction
		public RuleCall getSubActionsDeltaSubActionParserRuleCall_4_0() { return cSubActionsDeltaSubActionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DeltaSubActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeltaSubAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodOrFieldAdditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldRemovalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodRemovalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMethodModificationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DeltaSubAction:
		//	MethodOrFieldAddition | FieldRemoval | MethodRemoval | MethodModification;
		public ParserRule getRule() { return rule; }

		//MethodOrFieldAddition | FieldRemoval | MethodRemoval | MethodModification
		public Alternatives getAlternatives() { return cAlternatives; }

		//MethodOrFieldAddition
		public RuleCall getMethodOrFieldAdditionParserRuleCall_0() { return cMethodOrFieldAdditionParserRuleCall_0; }

		//FieldRemoval
		public RuleCall getFieldRemovalParserRuleCall_1() { return cFieldRemovalParserRuleCall_1; }

		//MethodRemoval
		public RuleCall getMethodRemovalParserRuleCall_2() { return cMethodRemovalParserRuleCall_2; }

		//MethodModification
		public RuleCall getMethodModificationParserRuleCall_3() { return cMethodModificationParserRuleCall_3; }
	}

	public class MethodOrFieldAdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodOrFieldAddition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldAdditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodAdditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MethodOrFieldAddition:
		//	FieldAddition | MethodAddition;
		public ParserRule getRule() { return rule; }

		//FieldAddition | MethodAddition
		public Alternatives getAlternatives() { return cAlternatives; }

		//FieldAddition
		public RuleCall getFieldAdditionParserRuleCall_0() { return cFieldAdditionParserRuleCall_0; }

		//MethodAddition
		public RuleCall getMethodAdditionParserRuleCall_1() { return cMethodAdditionParserRuleCall_1; }
	}

	public class FieldAdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldAddition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldFieldParserRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		
		//FieldAddition:
		//	"adds" field=Field;
		public ParserRule getRule() { return rule; }

		//"adds" field=Field
		public Group getGroup() { return cGroup; }

		//"adds"
		public Keyword getAddsKeyword_0() { return cAddsKeyword_0; }

		//field=Field
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }

		//Field
		public RuleCall getFieldFieldParserRuleCall_1_0() { return cFieldFieldParserRuleCall_1_0; }
	}

	public class MethodAdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodAddition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_1_0 = (RuleCall)cMethodAssignment_1.eContents().get(0);
		
		//MethodAddition:
		//	"adds" method=Method;
		public ParserRule getRule() { return rule; }

		//"adds" method=Method
		public Group getGroup() { return cGroup; }

		//"adds"
		public Keyword getAddsKeyword_0() { return cAddsKeyword_0; }

		//method=Method
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }

		//Method
		public RuleCall getMethodMethodParserRuleCall_1_0() { return cMethodMethodParserRuleCall_1_0; }
	}

	public class FieldRemovalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldRemoval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemovesFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFieldNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FieldRemoval:
		//	"removesField" name=FieldName ";";
		public ParserRule getRule() { return rule; }

		//"removesField" name=FieldName ";"
		public Group getGroup() { return cGroup; }

		//"removesField"
		public Keyword getRemovesFieldKeyword_0() { return cRemovesFieldKeyword_0; }

		//name=FieldName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FieldName
		public RuleCall getNameFieldNameParserRuleCall_1_0() { return cNameFieldNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class MethodRemovalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodRemoval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemovesMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMethodNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MethodRemoval:
		//	"removesMethod" name=MethodName ";";
		public ParserRule getRule() { return rule; }

		//"removesMethod" name=MethodName ";"
		public Group getGroup() { return cGroup; }

		//"removesMethod"
		public Keyword getRemovesMethodKeyword_0() { return cRemovesMethodKeyword_0; }

		//name=MethodName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//MethodName
		public RuleCall getNameMethodNameParserRuleCall_1_0() { return cNameMethodNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class MethodModificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodModification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_1_0 = (RuleCall)cMethodAssignment_1.eContents().get(0);
		
		//MethodModification:
		//	"modifies" method=Method;
		public ParserRule getRule() { return rule; }

		//"modifies" method=Method
		public Group getGroup() { return cGroup; }

		//"modifies"
		public Keyword getModifiesKeyword_0() { return cModifiesKeyword_0; }

		//method=Method
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }

		//Method
		public RuleCall getMethodMethodParserRuleCall_1_0() { return cMethodMethodParserRuleCall_1_0; }
	}

	public class ProductLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProductLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSplKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesFeaturesParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Assignment cConfigurationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConfigurationsConfigurationsParserRuleCall_4_0 = (RuleCall)cConfigurationsAssignment_4.eContents().get(0);
		private final Assignment cPartitionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPartitionDeltaPartitionParserRuleCall_5_0 = (RuleCall)cPartitionAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ProductLine:
		//	"spl" name=ID "{" features=Features configurations=Configurations partition=DeltaPartition "}";
		public ParserRule getRule() { return rule; }

		//"spl" name=ID "{" features=Features configurations=Configurations partition=DeltaPartition "}"
		public Group getGroup() { return cGroup; }

		//"spl"
		public Keyword getSplKeyword_0() { return cSplKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features=Features
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//Features
		public RuleCall getFeaturesFeaturesParserRuleCall_3_0() { return cFeaturesFeaturesParserRuleCall_3_0; }

		//configurations=Configurations
		public Assignment getConfigurationsAssignment_4() { return cConfigurationsAssignment_4; }

		//Configurations
		public RuleCall getConfigurationsConfigurationsParserRuleCall_4_0() { return cConfigurationsConfigurationsParserRuleCall_4_0; }

		//partition=DeltaPartition
		public Assignment getPartitionAssignment_5() { return cPartitionAssignment_5; }

		//DeltaPartition
		public RuleCall getPartitionDeltaPartitionParserRuleCall_5_0() { return cPartitionDeltaPartitionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class FeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Features");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeaturesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFeaturesListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFeaturesListFeatureParserRuleCall_1_0_0 = (RuleCall)cFeaturesListAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFeaturesListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cFeaturesListFeatureParserRuleCall_1_1_1_0 = (RuleCall)cFeaturesListAssignment_1_1_1.eContents().get(0);
		
		//Features:
		//	"features" (featuresList+=Feature ("," featuresList+=Feature)*);
		public ParserRule getRule() { return rule; }

		//"features" (featuresList+=Feature ("," featuresList+=Feature)*)
		public Group getGroup() { return cGroup; }

		//"features"
		public Keyword getFeaturesKeyword_0() { return cFeaturesKeyword_0; }

		//featuresList+=Feature ("," featuresList+=Feature)*
		public Group getGroup_1() { return cGroup_1; }

		//featuresList+=Feature
		public Assignment getFeaturesListAssignment_1_0() { return cFeaturesListAssignment_1_0; }

		//Feature
		public RuleCall getFeaturesListFeatureParserRuleCall_1_0_0() { return cFeaturesListFeatureParserRuleCall_1_0_0; }

		//("," featuresList+=Feature)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//featuresList+=Feature
		public Assignment getFeaturesListAssignment_1_1_1() { return cFeaturesListAssignment_1_1_1; }

		//Feature
		public RuleCall getFeaturesListFeatureParserRuleCall_1_1_1_0() { return cFeaturesListFeatureParserRuleCall_1_1_1_0; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Feature:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ConfigurationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configurations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConfigurationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigurationsConfigurationParserRuleCall_1_0 = (RuleCall)cConfigurationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConfigurationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConfigurationsConfigurationParserRuleCall_2_1_0 = (RuleCall)cConfigurationsAssignment_2_1.eContents().get(0);
		
		//Configurations:
		//	"configurations" configurations+=Configuration (";" configurations+=Configuration)*;
		public ParserRule getRule() { return rule; }

		//"configurations" configurations+=Configuration (";" configurations+=Configuration)*
		public Group getGroup() { return cGroup; }

		//"configurations"
		public Keyword getConfigurationsKeyword_0() { return cConfigurationsKeyword_0; }

		//configurations+=Configuration
		public Assignment getConfigurationsAssignment_1() { return cConfigurationsAssignment_1; }

		//Configuration
		public RuleCall getConfigurationsConfigurationParserRuleCall_1_0() { return cConfigurationsConfigurationParserRuleCall_1_0; }

		//(";" configurations+=Configuration)*
		public Group getGroup_2() { return cGroup_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//configurations+=Configuration
		public Assignment getConfigurationsAssignment_2_1() { return cConfigurationsAssignment_2_1; }

		//Configuration
		public RuleCall getConfigurationsConfigurationParserRuleCall_2_1_0() { return cConfigurationsConfigurationParserRuleCall_2_1_0; }
	}

	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configuration");
		private final Assignment cFormulaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFormulaPropositionalFormulaParserRuleCall_0 = (RuleCall)cFormulaAssignment.eContents().get(0);
		
		//Configuration:
		//	formula=PropositionalFormula;
		public ParserRule getRule() { return rule; }

		//formula=PropositionalFormula
		public Assignment getFormulaAssignment() { return cFormulaAssignment; }

		//PropositionalFormula
		public RuleCall getFormulaPropositionalFormulaParserRuleCall_0() { return cFormulaPropositionalFormulaParserRuleCall_0; }
	}

	public class DeltaPartitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeltaPartition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeltasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPartsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPartsPartitionPartParserRuleCall_1_0 = (RuleCall)cPartsAssignment_1.eContents().get(0);
		
		//DeltaPartition:
		//	"deltas" parts+=PartitionPart+;
		public ParserRule getRule() { return rule; }

		//"deltas" parts+=PartitionPart+
		public Group getGroup() { return cGroup; }

		//"deltas"
		public Keyword getDeltasKeyword_0() { return cDeltasKeyword_0; }

		//parts+=PartitionPart+
		public Assignment getPartsAssignment_1() { return cPartsAssignment_1; }

		//PartitionPart
		public RuleCall getPartsPartitionPartParserRuleCall_1_0() { return cPartsPartitionPartParserRuleCall_1_0; }
	}

	public class PartitionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartitionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleReferencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleReferencesModuleReferenceParserRuleCall_1_0 = (RuleCall)cModuleReferencesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cModuleReferencesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cModuleReferencesModuleReferenceParserRuleCall_2_1_0 = (RuleCall)cModuleReferencesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PartitionPart:
		//	"[" moduleReferences+=ModuleReference ("," moduleReferences+=ModuleReference)* "]";
		public ParserRule getRule() { return rule; }

		//"[" moduleReferences+=ModuleReference ("," moduleReferences+=ModuleReference)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//moduleReferences+=ModuleReference
		public Assignment getModuleReferencesAssignment_1() { return cModuleReferencesAssignment_1; }

		//ModuleReference
		public RuleCall getModuleReferencesModuleReferenceParserRuleCall_1_0() { return cModuleReferencesModuleReferenceParserRuleCall_1_0; }

		//("," moduleReferences+=ModuleReference)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//moduleReferences+=ModuleReference
		public Assignment getModuleReferencesAssignment_2_1() { return cModuleReferencesAssignment_2_1; }

		//ModuleReference
		public RuleCall getModuleReferencesModuleReferenceParserRuleCall_2_1_0() { return cModuleReferencesModuleReferenceParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ModuleReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeltaModuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeltaModuleDeltaModuleCrossReference_0_0 = (CrossReference)cDeltaModuleAssignment_0.eContents().get(0);
		private final RuleCall cDeltaModuleDeltaModuleIDTerminalRuleCall_0_0_1 = (RuleCall)cDeltaModuleDeltaModuleCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWhenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cWhenAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWhenPropositionalFormulaParserRuleCall_1_1_0 = (RuleCall)cWhenAssignment_1_1.eContents().get(0);
		
		//ModuleReference:
		//	deltaModule=[DeltaModule] ("when" when=PropositionalFormula)?;
		public ParserRule getRule() { return rule; }

		//deltaModule=[DeltaModule] ("when" when=PropositionalFormula)?
		public Group getGroup() { return cGroup; }

		//deltaModule=[DeltaModule]
		public Assignment getDeltaModuleAssignment_0() { return cDeltaModuleAssignment_0; }

		//[DeltaModule]
		public CrossReference getDeltaModuleDeltaModuleCrossReference_0_0() { return cDeltaModuleDeltaModuleCrossReference_0_0; }

		//ID
		public RuleCall getDeltaModuleDeltaModuleIDTerminalRuleCall_0_0_1() { return cDeltaModuleDeltaModuleIDTerminalRuleCall_0_0_1; }

		//("when" when=PropositionalFormula)?
		public Group getGroup_1() { return cGroup_1; }

		//"when"
		public Keyword getWhenKeyword_1_0() { return cWhenKeyword_1_0; }

		//when=PropositionalFormula
		public Assignment getWhenAssignment_1_1() { return cWhenAssignment_1_1; }

		//PropositionalFormula
		public RuleCall getWhenPropositionalFormulaParserRuleCall_1_1_0() { return cWhenPropositionalFormulaParserRuleCall_1_1_0; }
	}

	public class PropositionalFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropositionalFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PropositionalFormula:
		//	And ({Or.left=current} "||" right=And)*;
		public ParserRule getRule() { return rule; }

		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns PropositionalFormula:
		//	Primary ({And.left=current} "&&" right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({And.left=current} "&&" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({And.left=current} "&&" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFeatureRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_0_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPropParenAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFormulaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFormulaPropositionalFormulaParserRuleCall_1_2_0 = (RuleCall)cFormulaAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNegationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFormulaAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cFormulaPrimaryParserRuleCall_2_2_0 = (RuleCall)cFormulaAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPropTrueAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cTrueKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cPropFalseAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cFalseKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Primary returns PropositionalFormula:
		//	{FeatureRef} feature=[Feature] | {PropParen} "(" formula=PropositionalFormula ")" | {Negation} "!" formula=Primary |
		//	{PropTrue} "true" | {PropFalse} "false";
		public ParserRule getRule() { return rule; }

		//{FeatureRef} feature=[Feature] | {PropParen} "(" formula=PropositionalFormula ")" | {Negation} "!" formula=Primary |
		//{PropTrue} "true" | {PropFalse} "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{FeatureRef} feature=[Feature]
		public Group getGroup_0() { return cGroup_0; }

		//{FeatureRef}
		public Action getFeatureRefAction_0_0() { return cFeatureRefAction_0_0; }

		//feature=[Feature]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_0_1_0() { return cFeatureFeatureCrossReference_0_1_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_0_1_0_1() { return cFeatureFeatureIDTerminalRuleCall_0_1_0_1; }

		//{PropParen} "(" formula=PropositionalFormula ")"
		public Group getGroup_1() { return cGroup_1; }

		//{PropParen}
		public Action getPropParenAction_1_0() { return cPropParenAction_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//formula=PropositionalFormula
		public Assignment getFormulaAssignment_1_2() { return cFormulaAssignment_1_2; }

		//PropositionalFormula
		public RuleCall getFormulaPropositionalFormulaParserRuleCall_1_2_0() { return cFormulaPropositionalFormulaParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//{Negation} "!" formula=Primary
		public Group getGroup_2() { return cGroup_2; }

		//{Negation}
		public Action getNegationAction_2_0() { return cNegationAction_2_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_2_1() { return cExclamationMarkKeyword_2_1; }

		//formula=Primary
		public Assignment getFormulaAssignment_2_2() { return cFormulaAssignment_2_2; }

		//Primary
		public RuleCall getFormulaPrimaryParserRuleCall_2_2_0() { return cFormulaPrimaryParserRuleCall_2_2_0; }

		//{PropTrue} "true"
		public Group getGroup_3() { return cGroup_3; }

		//{PropTrue}
		public Action getPropTrueAction_3_0() { return cPropTrueAction_3_0; }

		//"true"
		public Keyword getTrueKeyword_3_1() { return cTrueKeyword_3_1; }

		//{PropFalse} "false"
		public Group getGroup_4() { return cGroup_4; }

		//{PropFalse}
		public Action getPropFalseAction_4_0() { return cPropFalseAction_4_0; }

		//"false"
		public Keyword getFalseKeyword_4_1() { return cFalseKeyword_4_1; }
	}

	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Product");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProductKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProductLineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cProductLineProductLineCrossReference_3_0 = (CrossReference)cProductLineAssignment_3.eContents().get(0);
		private final RuleCall cProductLineProductLineIDTerminalRuleCall_3_0_1 = (RuleCall)cProductLineProductLineCrossReference_3_0.eContents().get(1);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFeaturesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cFeaturesFeatureCrossReference_6_0 = (CrossReference)cFeaturesAssignment_6.eContents().get(0);
		private final RuleCall cFeaturesFeatureIDTerminalRuleCall_6_0_1 = (RuleCall)cFeaturesFeatureCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFeaturesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cFeaturesFeatureCrossReference_7_1_0 = (CrossReference)cFeaturesAssignment_7_1.eContents().get(0);
		private final RuleCall cFeaturesFeatureIDTerminalRuleCall_7_1_0_1 = (RuleCall)cFeaturesFeatureCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Product:
		//	"product" name=ID "from" productLine=[ProductLine] ":" "{" features+=[Feature] ("," features+=[Feature])* "}";
		public ParserRule getRule() { return rule; }

		//"product" name=ID "from" productLine=[ProductLine] ":" "{" features+=[Feature] ("," features+=[Feature])* "}"
		public Group getGroup() { return cGroup; }

		//"product"
		public Keyword getProductKeyword_0() { return cProductKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//productLine=[ProductLine]
		public Assignment getProductLineAssignment_3() { return cProductLineAssignment_3; }

		//[ProductLine]
		public CrossReference getProductLineProductLineCrossReference_3_0() { return cProductLineProductLineCrossReference_3_0; }

		//ID
		public RuleCall getProductLineProductLineIDTerminalRuleCall_3_0_1() { return cProductLineProductLineIDTerminalRuleCall_3_0_1; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//features+=[Feature]
		public Assignment getFeaturesAssignment_6() { return cFeaturesAssignment_6; }

		//[Feature]
		public CrossReference getFeaturesFeatureCrossReference_6_0() { return cFeaturesFeatureCrossReference_6_0; }

		//ID
		public RuleCall getFeaturesFeatureIDTerminalRuleCall_6_0_1() { return cFeaturesFeatureIDTerminalRuleCall_6_0_1; }

		//("," features+=[Feature])*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//features+=[Feature]
		public Assignment getFeaturesAssignment_7_1() { return cFeaturesAssignment_7_1; }

		//[Feature]
		public CrossReference getFeaturesFeatureCrossReference_7_1_0() { return cFeaturesFeatureCrossReference_7_1_0; }

		//ID
		public RuleCall getFeaturesFeatureIDTerminalRuleCall_7_1_0_1() { return cFeaturesFeatureIDTerminalRuleCall_7_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	
	
	private ProgramElements pProgram;
	private TypeElements pType;
	private TypeVariableElements pTypeVariable;
	private TypeVariableIdElements pTypeVariableId;
	private TypeForMethodElements pTypeForMethod;
	private VoidTypeElements pVoidType;
	private TypeForDeclarationElements pTypeForDeclaration;
	private BasicTypeElements pBasicType;
	private IntTypeElements pIntType;
	private BooleanTypeElements pBooleanType;
	private StringTypeElements pStringType;
	private ClassTypeElements pClassType;
	private ClassElements pClass;
	private ClassNameElements pClassName;
	private FieldNameElements pFieldName;
	private MethodNameElements pMethodName;
	private TypedDeclarationElements pTypedDeclaration;
	private FieldElements pField;
	private LocalVariableDeclarationElements pLocalVariableDeclaration;
	private ParameterElements pParameter;
	private MethodElements pMethod;
	private StatementBlockElements pStatementBlock;
	private ReturnStatementElements pReturnStatement;
	private StatementElements pStatement;
	private ExpressionStatementElements pExpressionStatement;
	private AssignmentElements pAssignment;
	private IfStatementElements pIfStatement;
	private ExpressionElements pExpression;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private ComparisonElements pComparison;
	private BooleanExpressionElements pBooleanExpression;
	private AtomicElements pAtomic;
	private TerminalExpressionElements pTerminalExpression;
	private NullElements pNull;
	private ThisElements pThis;
	private OriginalElements pOriginal;
	private VariableAccessElements pVariableAccess;
	private NewElements pNew;
	private CastElements pCast;
	private ParenElements pParen;
	private ConstantElements pConstant;
	private StringConstantElements pStringConstant;
	private IntConstantElements pIntConstant;
	private BoolConstantElements pBoolConstant;
	private MessageElements pMessage;
	private MethodCallElements pMethodCall;
	private FieldSelectionElements pFieldSelection;
	private TerminalRule tJAVAVERBATIM;
	private DeltaModuleElements pDeltaModule;
	private DeltaActionElements pDeltaAction;
	private ClassAdditionElements pClassAddition;
	private RemovesOrModifiesClassElements pRemovesOrModifiesClass;
	private ClassRemovalElements pClassRemoval;
	private ClassModificationElements pClassModification;
	private DeltaSubActionElements pDeltaSubAction;
	private MethodOrFieldAdditionElements pMethodOrFieldAddition;
	private FieldAdditionElements pFieldAddition;
	private MethodAdditionElements pMethodAddition;
	private FieldRemovalElements pFieldRemoval;
	private MethodRemovalElements pMethodRemoval;
	private MethodModificationElements pMethodModification;
	private ProductLineElements pProductLine;
	private FeaturesElements pFeatures;
	private FeatureElements pFeature;
	private ConfigurationsElements pConfigurations;
	private ConfigurationElements pConfiguration;
	private DeltaPartitionElements pDeltaPartition;
	private PartitionPartElements pPartitionPart;
	private ModuleReferenceElements pModuleReference;
	private PropositionalFormulaElements pPropositionalFormula;
	private AndElements pAnd;
	private PrimaryElements pPrimary;
	private ProductElements pProduct;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DeltaJGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	deltaModules+=DeltaModule* productLines+=ProductLine* products+=Product*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Type:
	//	TypeVariable | TypeForMethod;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	/// * 
	// * TypeVariable cannot be written in the syntax but used only
	// * by the type system
	// * / TypeVariable:
	//	varName=TypeVariableId;
	public TypeVariableElements getTypeVariableAccess() {
		return (pTypeVariable != null) ? pTypeVariable : (pTypeVariable = new TypeVariableElements());
	}
	
	public ParserRule getTypeVariableRule() {
		return getTypeVariableAccess().getRule();
	}

	//TypeVariableId:
	//	"<" INT ">";
	public TypeVariableIdElements getTypeVariableIdAccess() {
		return (pTypeVariableId != null) ? pTypeVariableId : (pTypeVariableId = new TypeVariableIdElements());
	}
	
	public ParserRule getTypeVariableIdRule() {
		return getTypeVariableIdAccess().getRule();
	}

	//TypeForMethod:
	//	VoidType | TypeForDeclaration;
	public TypeForMethodElements getTypeForMethodAccess() {
		return (pTypeForMethod != null) ? pTypeForMethod : (pTypeForMethod = new TypeForMethodElements());
	}
	
	public ParserRule getTypeForMethodRule() {
		return getTypeForMethodAccess().getRule();
	}

	//VoidType:
	//	void="void";
	public VoidTypeElements getVoidTypeAccess() {
		return (pVoidType != null) ? pVoidType : (pVoidType = new VoidTypeElements());
	}
	
	public ParserRule getVoidTypeRule() {
		return getVoidTypeAccess().getRule();
	}

	//TypeForDeclaration:
	//	BasicType | ClassType;
	public TypeForDeclarationElements getTypeForDeclarationAccess() {
		return (pTypeForDeclaration != null) ? pTypeForDeclaration : (pTypeForDeclaration = new TypeForDeclarationElements());
	}
	
	public ParserRule getTypeForDeclarationRule() {
		return getTypeForDeclarationAccess().getRule();
	}

	//BasicType:
	//	IntType | BooleanType | StringType;
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//IntType:
	//	basic="int";
	public IntTypeElements getIntTypeAccess() {
		return (pIntType != null) ? pIntType : (pIntType = new IntTypeElements());
	}
	
	public ParserRule getIntTypeRule() {
		return getIntTypeAccess().getRule();
	}

	//BooleanType:
	//	basic="boolean";
	public BooleanTypeElements getBooleanTypeAccess() {
		return (pBooleanType != null) ? pBooleanType : (pBooleanType = new BooleanTypeElements());
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//StringType:
	//	basic="String";
	public StringTypeElements getStringTypeAccess() {
		return (pStringType != null) ? pStringType : (pStringType = new StringTypeElements());
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//ClassType:
	//	classref=ClassName;
	public ClassTypeElements getClassTypeAccess() {
		return (pClassType != null) ? pClassType : (pClassType = new ClassTypeElements());
	}
	
	public ParserRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}

	//Class:
	//	"class" name=ID ("extends" extends=ClassName)? "{" fields+=Field* methods+=Method* "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//ClassName:
	//	ID;
	public ClassNameElements getClassNameAccess() {
		return (pClassName != null) ? pClassName : (pClassName = new ClassNameElements());
	}
	
	public ParserRule getClassNameRule() {
		return getClassNameAccess().getRule();
	}

	//FieldName:
	//	ID;
	public FieldNameElements getFieldNameAccess() {
		return (pFieldName != null) ? pFieldName : (pFieldName = new FieldNameElements());
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}

	//MethodName:
	//	ID;
	public MethodNameElements getMethodNameAccess() {
		return (pMethodName != null) ? pMethodName : (pMethodName = new MethodNameElements());
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}

	//TypedDeclaration:
	//	Field | LocalVariableDeclaration | Parameter;
	public TypedDeclarationElements getTypedDeclarationAccess() {
		return (pTypedDeclaration != null) ? pTypedDeclaration : (pTypedDeclaration = new TypedDeclarationElements());
	}
	
	public ParserRule getTypedDeclarationRule() {
		return getTypedDeclarationAccess().getRule();
	}

	//Field:
	//	type=TypeForDeclaration name=ID ";";
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//LocalVariableDeclaration:
	//	type=TypeForDeclaration name=ID ";";
	public LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return (pLocalVariableDeclaration != null) ? pLocalVariableDeclaration : (pLocalVariableDeclaration = new LocalVariableDeclarationElements());
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//Parameter:
	//	type=TypeForDeclaration name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Method:
	//	returntype=TypeForMethod name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" body=StatementBlock?;
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//StatementBlock:
	//	{StatementBlock} "{" localvariables+=LocalVariableDeclaration* statements+=Statement* statements+=ReturnStatement?
	//	"}";
	public StatementBlockElements getStatementBlockAccess() {
		return (pStatementBlock != null) ? pStatementBlock : (pStatementBlock = new StatementBlockElements());
	}
	
	public ParserRule getStatementBlockRule() {
		return getStatementBlockAccess().getRule();
	}

	//ReturnStatement returns Statement:
	//	{ReturnStatement} "return" expression=Expression? ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return (pReturnStatement != null) ? pReturnStatement : (pReturnStatement = new ReturnStatementElements());
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//Statement:
	//	ExpressionStatement | Assignment | IfStatement | {JavaVerbatim} verbatim=JAVAVERBATIM;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//ExpressionStatement:
	//	expression=Expression ";";
	public ExpressionStatementElements getExpressionStatementAccess() {
		return (pExpressionStatement != null) ? pExpressionStatement : (pExpressionStatement = new ExpressionStatementElements());
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//Assignment:
	//	left=Expression "=" right=Expression ";";
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//IfStatement:
	//	{IfStatement} "if" "(" expression=Expression ")" thenBlock=StatementBlock ("else" elseBlock=StatementBlock)?;
	public IfStatementElements getIfStatementAccess() {
		return (pIfStatement != null) ? pIfStatement : (pIfStatement = new IfStatementElements());
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//Expression:
	//	Addition;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Comparison ({MultiOrDiv.left=current} op=("*" | "/") right=Comparison)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Comparison returns Expression:
	//	BooleanExpression ({Comparison.left=current} op=(">=" | "<=" | "<" | ">" | "==" | "!=") right=BooleanExpression)*;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//BooleanExpression returns Expression:
	//	Atomic ({AndOrExpression.left=current} op=("||" | "&&") right=Atomic)*;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//Atomic returns Expression:
	//	{BooleanNegation} "!" expression=Atomic / * right associativity * / / * right associativity * / | {ArithmeticSigned} "-"
	//	expression=Atomic | TerminalExpression ({Selection.receiver=current} "." message=Message)*;
	public AtomicElements getAtomicAccess() {
		return (pAtomic != null) ? pAtomic : (pAtomic = new AtomicElements());
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//TerminalExpression returns Expression:
	//	This | Null | Original | New | Cast | Constant | VariableAccess | Paren;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//Null:
	//	null="null";
	public NullElements getNullAccess() {
		return (pNull != null) ? pNull : (pNull = new NullElements());
	}
	
	public ParserRule getNullRule() {
		return getNullAccess().getRule();
	}

	//This:
	//	variable="this";
	public ThisElements getThisAccess() {
		return (pThis != null) ? pThis : (pThis = new ThisElements());
	}
	
	public ParserRule getThisRule() {
		return getThisAccess().getRule();
	}

	//Original:
	//	method="original" "(" (args+=Expression ("," args+=Expression)*)? ")";
	public OriginalElements getOriginalAccess() {
		return (pOriginal != null) ? pOriginal : (pOriginal = new OriginalElements());
	}
	
	public ParserRule getOriginalRule() {
		return getOriginalAccess().getRule();
	}

	//VariableAccess:
	//	variable=[TypedDeclaration];
	public VariableAccessElements getVariableAccessAccess() {
		return (pVariableAccess != null) ? pVariableAccess : (pVariableAccess = new VariableAccessElements());
	}
	
	public ParserRule getVariableAccessRule() {
		return getVariableAccessAccess().getRule();
	}

	//New:
	//	"new" class=ClassName "(" / * (args+=Expression (',' args+=Expression)*)? * / ")";
	public NewElements getNewAccess() {
		return (pNew != null) ? pNew : (pNew = new NewElements());
	}
	
	public ParserRule getNewRule() {
		return getNewAccess().getRule();
	}

	//Cast:
	//	"(" type=ClassName ")" object=TerminalExpression;
	public CastElements getCastAccess() {
		return (pCast != null) ? pCast : (pCast = new CastElements());
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}

	//Paren:
	//	"(" expression=Expression ")";
	public ParenElements getParenAccess() {
		return (pParen != null) ? pParen : (pParen = new ParenElements());
	}
	
	public ParserRule getParenRule() {
		return getParenAccess().getRule();
	}

	//Constant:
	//	IntConstant | BoolConstant | StringConstant;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//StringConstant:
	//	constant=STRING;
	public StringConstantElements getStringConstantAccess() {
		return (pStringConstant != null) ? pStringConstant : (pStringConstant = new StringConstantElements());
	}
	
	public ParserRule getStringConstantRule() {
		return getStringConstantAccess().getRule();
	}

	//IntConstant:
	//	constant=INT;
	public IntConstantElements getIntConstantAccess() {
		return (pIntConstant != null) ? pIntConstant : (pIntConstant = new IntConstantElements());
	}
	
	public ParserRule getIntConstantRule() {
		return getIntConstantAccess().getRule();
	}

	//BoolConstant:
	//	constant=("true" | "false");
	public BoolConstantElements getBoolConstantAccess() {
		return (pBoolConstant != null) ? pBoolConstant : (pBoolConstant = new BoolConstantElements());
	}
	
	public ParserRule getBoolConstantRule() {
		return getBoolConstantAccess().getRule();
	}

	//Message:
	//	FieldSelection | MethodCall;
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//MethodCall:
	//	method=ID "(" (args+=Expression ("," args+=Expression)*)? ")";
	public MethodCallElements getMethodCallAccess() {
		return (pMethodCall != null) ? pMethodCall : (pMethodCall = new MethodCallElements());
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	//FieldSelection:
	//	field=ID;
	public FieldSelectionElements getFieldSelectionAccess() {
		return (pFieldSelection != null) ? pFieldSelection : (pFieldSelection = new FieldSelectionElements());
	}
	
	public ParserRule getFieldSelectionRule() {
		return getFieldSelectionAccess().getRule();
	}

	//terminal JAVAVERBATIM:
	//	"**Java:"->":Java**";
	public TerminalRule getJAVAVERBATIMRule() {
		return (tJAVAVERBATIM != null) ? tJAVAVERBATIM : (tJAVAVERBATIM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JAVAVERBATIM"));
	} 

	//DeltaModule:
	//	"delta" name=ID "{" deltaActions+=DeltaAction* "}";
	public DeltaModuleElements getDeltaModuleAccess() {
		return (pDeltaModule != null) ? pDeltaModule : (pDeltaModule = new DeltaModuleElements());
	}
	
	public ParserRule getDeltaModuleRule() {
		return getDeltaModuleAccess().getRule();
	}

	//DeltaAction:
	//	ClassAddition | RemovesOrModifiesClass;
	public DeltaActionElements getDeltaActionAccess() {
		return (pDeltaAction != null) ? pDeltaAction : (pDeltaAction = new DeltaActionElements());
	}
	
	public ParserRule getDeltaActionRule() {
		return getDeltaActionAccess().getRule();
	}

	//ClassAddition:
	//	"adds" class=Class;
	public ClassAdditionElements getClassAdditionAccess() {
		return (pClassAddition != null) ? pClassAddition : (pClassAddition = new ClassAdditionElements());
	}
	
	public ParserRule getClassAdditionRule() {
		return getClassAdditionAccess().getRule();
	}

	//RemovesOrModifiesClass:
	//	ClassRemoval | ClassModification;
	public RemovesOrModifiesClassElements getRemovesOrModifiesClassAccess() {
		return (pRemovesOrModifiesClass != null) ? pRemovesOrModifiesClass : (pRemovesOrModifiesClass = new RemovesOrModifiesClassElements());
	}
	
	public ParserRule getRemovesOrModifiesClassRule() {
		return getRemovesOrModifiesClassAccess().getRule();
	}

	//ClassRemoval:
	//	"removes" name=ClassName ";";
	public ClassRemovalElements getClassRemovalAccess() {
		return (pClassRemoval != null) ? pClassRemoval : (pClassRemoval = new ClassRemovalElements());
	}
	
	public ParserRule getClassRemovalRule() {
		return getClassRemovalAccess().getRule();
	}

	//ClassModification:
	//	"modifies" name=ClassName ("extending" extends=ClassName)? "{" subActions+=DeltaSubAction* "}";
	public ClassModificationElements getClassModificationAccess() {
		return (pClassModification != null) ? pClassModification : (pClassModification = new ClassModificationElements());
	}
	
	public ParserRule getClassModificationRule() {
		return getClassModificationAccess().getRule();
	}

	//DeltaSubAction:
	//	MethodOrFieldAddition | FieldRemoval | MethodRemoval | MethodModification;
	public DeltaSubActionElements getDeltaSubActionAccess() {
		return (pDeltaSubAction != null) ? pDeltaSubAction : (pDeltaSubAction = new DeltaSubActionElements());
	}
	
	public ParserRule getDeltaSubActionRule() {
		return getDeltaSubActionAccess().getRule();
	}

	//MethodOrFieldAddition:
	//	FieldAddition | MethodAddition;
	public MethodOrFieldAdditionElements getMethodOrFieldAdditionAccess() {
		return (pMethodOrFieldAddition != null) ? pMethodOrFieldAddition : (pMethodOrFieldAddition = new MethodOrFieldAdditionElements());
	}
	
	public ParserRule getMethodOrFieldAdditionRule() {
		return getMethodOrFieldAdditionAccess().getRule();
	}

	//FieldAddition:
	//	"adds" field=Field;
	public FieldAdditionElements getFieldAdditionAccess() {
		return (pFieldAddition != null) ? pFieldAddition : (pFieldAddition = new FieldAdditionElements());
	}
	
	public ParserRule getFieldAdditionRule() {
		return getFieldAdditionAccess().getRule();
	}

	//MethodAddition:
	//	"adds" method=Method;
	public MethodAdditionElements getMethodAdditionAccess() {
		return (pMethodAddition != null) ? pMethodAddition : (pMethodAddition = new MethodAdditionElements());
	}
	
	public ParserRule getMethodAdditionRule() {
		return getMethodAdditionAccess().getRule();
	}

	//FieldRemoval:
	//	"removesField" name=FieldName ";";
	public FieldRemovalElements getFieldRemovalAccess() {
		return (pFieldRemoval != null) ? pFieldRemoval : (pFieldRemoval = new FieldRemovalElements());
	}
	
	public ParserRule getFieldRemovalRule() {
		return getFieldRemovalAccess().getRule();
	}

	//MethodRemoval:
	//	"removesMethod" name=MethodName ";";
	public MethodRemovalElements getMethodRemovalAccess() {
		return (pMethodRemoval != null) ? pMethodRemoval : (pMethodRemoval = new MethodRemovalElements());
	}
	
	public ParserRule getMethodRemovalRule() {
		return getMethodRemovalAccess().getRule();
	}

	//MethodModification:
	//	"modifies" method=Method;
	public MethodModificationElements getMethodModificationAccess() {
		return (pMethodModification != null) ? pMethodModification : (pMethodModification = new MethodModificationElements());
	}
	
	public ParserRule getMethodModificationRule() {
		return getMethodModificationAccess().getRule();
	}

	//ProductLine:
	//	"spl" name=ID "{" features=Features configurations=Configurations partition=DeltaPartition "}";
	public ProductLineElements getProductLineAccess() {
		return (pProductLine != null) ? pProductLine : (pProductLine = new ProductLineElements());
	}
	
	public ParserRule getProductLineRule() {
		return getProductLineAccess().getRule();
	}

	//Features:
	//	"features" (featuresList+=Feature ("," featuresList+=Feature)*);
	public FeaturesElements getFeaturesAccess() {
		return (pFeatures != null) ? pFeatures : (pFeatures = new FeaturesElements());
	}
	
	public ParserRule getFeaturesRule() {
		return getFeaturesAccess().getRule();
	}

	//Feature:
	//	name=ID;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Configurations:
	//	"configurations" configurations+=Configuration (";" configurations+=Configuration)*;
	public ConfigurationsElements getConfigurationsAccess() {
		return (pConfigurations != null) ? pConfigurations : (pConfigurations = new ConfigurationsElements());
	}
	
	public ParserRule getConfigurationsRule() {
		return getConfigurationsAccess().getRule();
	}

	//Configuration:
	//	formula=PropositionalFormula;
	public ConfigurationElements getConfigurationAccess() {
		return (pConfiguration != null) ? pConfiguration : (pConfiguration = new ConfigurationElements());
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}

	//DeltaPartition:
	//	"deltas" parts+=PartitionPart+;
	public DeltaPartitionElements getDeltaPartitionAccess() {
		return (pDeltaPartition != null) ? pDeltaPartition : (pDeltaPartition = new DeltaPartitionElements());
	}
	
	public ParserRule getDeltaPartitionRule() {
		return getDeltaPartitionAccess().getRule();
	}

	//PartitionPart:
	//	"[" moduleReferences+=ModuleReference ("," moduleReferences+=ModuleReference)* "]";
	public PartitionPartElements getPartitionPartAccess() {
		return (pPartitionPart != null) ? pPartitionPart : (pPartitionPart = new PartitionPartElements());
	}
	
	public ParserRule getPartitionPartRule() {
		return getPartitionPartAccess().getRule();
	}

	//ModuleReference:
	//	deltaModule=[DeltaModule] ("when" when=PropositionalFormula)?;
	public ModuleReferenceElements getModuleReferenceAccess() {
		return (pModuleReference != null) ? pModuleReference : (pModuleReference = new ModuleReferenceElements());
	}
	
	public ParserRule getModuleReferenceRule() {
		return getModuleReferenceAccess().getRule();
	}

	//PropositionalFormula:
	//	And ({Or.left=current} "||" right=And)*;
	public PropositionalFormulaElements getPropositionalFormulaAccess() {
		return (pPropositionalFormula != null) ? pPropositionalFormula : (pPropositionalFormula = new PropositionalFormulaElements());
	}
	
	public ParserRule getPropositionalFormulaRule() {
		return getPropositionalFormulaAccess().getRule();
	}

	//And returns PropositionalFormula:
	//	Primary ({And.left=current} "&&" right=Primary)*;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Primary returns PropositionalFormula:
	//	{FeatureRef} feature=[Feature] | {PropParen} "(" formula=PropositionalFormula ")" | {Negation} "!" formula=Primary |
	//	{PropTrue} "true" | {PropFalse} "false";
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Product:
	//	"product" name=ID "from" productLine=[ProductLine] ":" "{" features+=[Feature] ("," features+=[Feature])* "}";
	public ProductElements getProductAccess() {
		return (pProduct != null) ? pProduct : (pProduct = new ProductElements());
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
