package org.deltaj.typesystem.deltaj;

import org.deltaj.typesystem.deltaj.rules.*;

import it.xtypes.runtime.RuleFailedException;
import it.xtypes.runtime.RuntimeRule;
import it.xtypes.runtime.RuntimeRules;
import it.xtypes.runtime.RuntimeTypeSystem;
import it.xtypes.runtime.TypeSystemResult;
import it.xtypes.runtime.TypeSystemResultPair;
import it.xtypes.runtime.TypingJudgmentEnvironment;

import org.deltaj.deltaj.DeltajPackage;

/**
 * Automatically generated by XTypeS, http://xtypes.sourceforge.net
 * Do not modify it.
 * This class should be instantiated with Google Guide injector.
 */
public class DeltaJTypeSystemDefinition extends RuntimeTypeSystem {

	protected DeltajPackage basicPackage = DeltajPackage.eINSTANCE;

	public DeltaJTypeSystemDefinition() {
		RuntimeRules rules = new RuntimeRules();
		rules.add(new ExpressionTypeRule());
		rules.add(new PlusTypeRule());
		rules.add(new MinusTypeRule());
		rules.add(new ArithmeticSignedTypeRule());
		rules.add(new MultiOrDivTypeRule());
		rules.add(new ComparisonTypeRule());
		rules.add(new AndOrExpressionTypeRule());
		rules.add(new BooleanNegationTypeRule());
		rules.add(new StringConstantTypeRule());
		rules.add(new IntConstantTypeRule());
		rules.add(new BoolConstantTypeRule());
		rules.add(new ThisTypeRule());
		rules.add(new NewTypeRule());
		rules.add(new CastTypeRule());
		rules.add(new ParenTypeRule());
		rules.add(new VariableAccessTypeRule());
		setRules(rules);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Expression object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getExpression()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.Expression object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Expression, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Expression left, org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getExpression()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Expression, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.Expression left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Expression left, org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getExpression()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.deltaj.deltaj.Expression left, org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.Plus object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getPlus()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.Plus object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Plus, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.Plus left,
			org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getPlus()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Plus, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.Plus left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.Plus left,
			org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getPlus()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(org.deltaj.deltaj.Plus left,
			org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Minus object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getMinus()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.Minus object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Minus, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Minus left, org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getMinus()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Minus, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.Minus left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Minus left, org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getMinus()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(org.deltaj.deltaj.Minus left,
			org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.ArithmeticSigned object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getArithmeticSigned()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.ArithmeticSigned object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.ArithmeticSigned, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.ArithmeticSigned left,
			org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getArithmeticSigned()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.ArithmeticSigned, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.ArithmeticSigned left,
			org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.ArithmeticSigned left,
			org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getArithmeticSigned()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.deltaj.deltaj.ArithmeticSigned left,
			org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.MultiOrDiv object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getMultiOrDiv()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.MultiOrDiv object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.MultiOrDiv, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.MultiOrDiv left, org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getMultiOrDiv()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.MultiOrDiv, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.MultiOrDiv left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.MultiOrDiv left, org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getMultiOrDiv()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.deltaj.deltaj.MultiOrDiv left, org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Comparison object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getComparison()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.Comparison object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Comparison, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Comparison left, org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getComparison()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Comparison, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.Comparison left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Comparison left, org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getComparison()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.deltaj.deltaj.Comparison left, org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.AndOrExpression object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getAndOrExpression()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.AndOrExpression object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.AndOrExpression, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.AndOrExpression left, org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getAndOrExpression()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.AndOrExpression, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.AndOrExpression left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.AndOrExpression left, org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getAndOrExpression()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.deltaj.deltaj.AndOrExpression left, org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.BooleanNegation object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getBooleanNegation()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.BooleanNegation object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.BooleanNegation, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.BooleanNegation left, org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getBooleanNegation()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.BooleanNegation, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.BooleanNegation left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.BooleanNegation left, org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getBooleanNegation()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.deltaj.deltaj.BooleanNegation left, org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.StringConstant object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getStringConstant()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.StringConstant object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.StringConstant, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.StringConstant left, org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getStringConstant()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.StringConstant, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.StringConstant left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.StringConstant left, org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getStringConstant()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.deltaj.deltaj.StringConstant left, org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.IntConstant object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getIntConstant()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.IntConstant object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.IntConstant, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.IntConstant left, org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getIntConstant()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.IntConstant, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.IntConstant left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.IntConstant left, org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getIntConstant()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.deltaj.deltaj.IntConstant left, org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.BoolConstant object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getBoolConstant()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.BoolConstant object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.BoolConstant, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.BoolConstant left, org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getBoolConstant()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.BoolConstant, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.BoolConstant left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.BoolConstant left, org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getBoolConstant()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.deltaj.deltaj.BoolConstant left, org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.This object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getThis()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.This object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.This, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.This left,
			org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getThis()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.This, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.This left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.This left,
			org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getThis()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(org.deltaj.deltaj.This left,
			org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.New object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getNew()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.New object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.New, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.New left,
			org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getNew()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.New, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.New left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.New left,
			org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getNew()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(org.deltaj.deltaj.New left,
			org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.Cast object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getCast()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.Cast object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Cast, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.Cast left,
			org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getCast()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Cast, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.Cast left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment, org.deltaj.deltaj.Cast left,
			org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getCast()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(org.deltaj.deltaj.Cast left,
			org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Paren object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getParen()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.Paren object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Paren, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Paren left, org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getParen()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.Paren, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.Paren left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.Paren left, org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getParen()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(org.deltaj.deltaj.Paren left,
			org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.VariableAccess object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getVariableAccess()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.deltaj.deltaj.Type> typeAsType(
			org.deltaj.deltaj.VariableAccess object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.VariableAccess, org.deltaj.deltaj.Type> type(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.VariableAccess left, org.deltaj.deltaj.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getVariableAccess()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.deltaj.deltaj.VariableAccess, org.deltaj.deltaj.Type> type(
			org.deltaj.deltaj.VariableAccess left, org.deltaj.deltaj.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.deltaj.deltaj.VariableAccess left, org.deltaj.deltaj.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getVariableAccess()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.deltaj.deltaj.VariableAccess left, org.deltaj.deltaj.Type right) {
		return checkType(null, left, right);
	}

	public RuntimeRule applyTypeRule(TypingJudgmentEnvironment environment,
			Object left, Object right) throws RuleFailedException {
		return applyRule(environment, "|-", ":", left, right);
	}

	public RuntimeRule applyTypeRule(Object left, Object right)
			throws RuleFailedException {
		return applyTypeRule(null, left, right);
	}

}
