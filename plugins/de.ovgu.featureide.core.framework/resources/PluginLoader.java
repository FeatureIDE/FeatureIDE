/* FeatureIDE - A Framework for Feature-Oriented Software Development
 * Copyright (C) 2005-2022  FeatureIDE team, University of Magdeburg, Germany
 *
 * This file is part of FeatureIDE.
 * 
 * FeatureIDE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * FeatureIDE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with FeatureIDE.  If not, see <http://www.gnu.org/licenses/>.
 *
 * See http://featureide.cs.ovgu.de/ for further information.
 */
package loader;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * Class generated by FeatureIDE to load plug-ins in framework projects.
 * 
 * @author Daniel Hohmann
 * @author Sebastian Krieter
 */
public class PluginLoader {

	private static final ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();
	private static final Map<Object, List<Object>> classInstanceMap = registerClasses() //
			.entrySet().stream().collect(Collectors.toMap( //
					PluginLoader::loadClass, //
					PluginLoader::instantiateClasses));

	private static Map<String, List<String>> registerClasses() {
		Map<String, List<String>> map = new HashMap<>();
		try {
			final DocumentBuilder newDocumentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
			final Enumeration<URL> urls = ClassLoader.getSystemResources("info.xml");
			while (urls.hasMoreElements()) {
				try {
					final Document doc = newDocumentBuilder.parse(urls.nextElement().openStream());
					final NodeList nlInterfaces = doc.getElementsByTagName("interface");
					for (int i = 0; i < nlInterfaces.getLength(); i++) {
						final Node interfaceNode = nlInterfaces.item(i);
						if (interfaceNode.getNodeType() == Node.ELEMENT_NODE) {
							final List<String> listClasses = new ArrayList<>();
							final NodeList nlClasses = interfaceNode.getChildNodes();
							for (int j = 0; j < nlClasses.getLength(); j++) {
								final Node classNode = nlClasses.item(j);
								if (classNode.getNodeType() == Node.ELEMENT_NODE) {
									listClasses.add(((Element) classNode).getTextContent());
								}
							}
							if (!listClasses.isEmpty()) {
								final String interfaceName = ((Element) interfaceNode).getAttribute("id");
								final List<String> list = map.get(interfaceName);
								if (list != null) {
									list.addAll(listClasses);
								} else {
									map.put(interfaceName, listClasses);
								}
							}
						}
					}
				} catch (IOException | SAXException e) {
					e.printStackTrace();
				}
			}
		} catch (IOException | ParserConfigurationException e) {
			e.printStackTrace();
		}
		return map;
	}

	private static Class<?> loadClass(Entry<String, List<String>> classEntry) {
		try {
			return systemClassLoader.loadClass(classEntry.getKey());
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			return Object.class;
		}
	}

	private static List<Object> instantiateClasses(Entry<String, List<String>> classEntry) {
		return classEntry.getValue().stream() //
				.map(PluginLoader::instantiateClass) //
				.filter(Objects::nonNull) //
				.collect(Collectors.toList());
	}

	private static Object instantiateClass(String className) {
		try {
			return systemClassLoader.loadClass(className).getConstructor().newInstance();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	public static <T> List<T> load(Class<T> cl) {
		return classInstanceMap.getOrDefault(cl, Collections.emptyList()) //
				.stream() //
				.map(cl::cast) //
				.collect(Collectors.toList());
	}

}
